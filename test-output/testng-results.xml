<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="138" passed="123" failed="15" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-05-19T14:30:23 EDT" name="DSAlgo Suite" finished-at="2025-05-19T14:39:17 EDT" duration-ms="534096">
    <groups>
      <group name="negative">
        <method signature="ArrayTests.SearchTheArray1(java.lang.String,int,java.lang.String)[pri:10, instance:testClasses.ArrayTests@4ddbbdf8]" name="SearchTheArray1" class="testClasses.ArrayTests"/>
        <method signature="ArrayTests.MaxConsecutiveOnes1(java.lang.String,int,java.lang.String)[pri:12, instance:testClasses.ArrayTests@4ddbbdf8]" name="MaxConsecutiveOnes1" class="testClasses.ArrayTests"/>
        <method signature="ArrayTests.EvenNumberOfDigits1(java.lang.String,int,java.lang.String)[pri:14, instance:testClasses.ArrayTests@4ddbbdf8]" name="EvenNumberOfDigits1" class="testClasses.ArrayTests"/>
        <method signature="ArrayTests.SquaresofaSorted1(java.lang.String,int,java.lang.String)[pri:16, instance:testClasses.ArrayTests@4ddbbdf8]" name="SquaresofaSorted1" class="testClasses.ArrayTests"/>
      </group> <!-- negative -->
      <group name="smoke">
        <method signature="GraphTests.testPracticeQuestionsLinkInsideGraph()[pri:3, instance:testClasses.GraphTests@20c0a64d]" name="testPracticeQuestionsLinkInsideGraph" class="testClasses.GraphTests"/>
        <method signature="StackTests.testPracticeQuestionsApplications()[pri:3, instance:testClasses.StackTests@71329995]" name="testPracticeQuestionsApplications" class="testClasses.StackTests"/>
        <method signature="StackTests.testPracticeQuestionsOpsStack()[pri:3, instance:testClasses.StackTests@71329995]" name="testPracticeQuestionsOpsStack" class="testClasses.StackTests"/>
        <method signature="GraphTests.testPracticeQuestionsGraphRepresentation()[pri:6, instance:testClasses.GraphTests@20c0a64d]" name="testPracticeQuestionsGraphRepresentation" class="testClasses.GraphTests"/>
        <method signature="StackTests.testPracticeQuestionsImplemntation()[pri:6, instance:testClasses.StackTests@71329995]" name="testPracticeQuestionsImplemntation" class="testClasses.StackTests"/>
      </group> <!-- smoke -->
      <group name="positive">
        <method signature="ArrayTests.SearchTheArray(java.lang.String,int,java.lang.String)[pri:9, instance:testClasses.ArrayTests@4ddbbdf8]" name="SearchTheArray" class="testClasses.ArrayTests"/>
        <method signature="ArrayTests.MaxConsecutiveOnes(java.lang.String,int,java.lang.String)[pri:11, instance:testClasses.ArrayTests@4ddbbdf8]" name="MaxConsecutiveOnes" class="testClasses.ArrayTests"/>
        <method signature="ArrayTests.EvenNumberOfDigits(java.lang.String,int,java.lang.String)[pri:13, instance:testClasses.ArrayTests@4ddbbdf8]" name="EvenNumberOfDigits" class="testClasses.ArrayTests"/>
        <method signature="ArrayTests.SquaresofaSorted(java.lang.String,int,java.lang.String)[pri:15, instance:testClasses.ArrayTests@4ddbbdf8]" name="SquaresofaSorted" class="testClasses.ArrayTests"/>
      </group> <!-- positive -->
    </groups>
    <test started-at="2025-05-19T14:30:23 EDT" name="DSAlgo Tests" finished-at="2025-05-19T14:39:17 EDT" duration-ms="534096">
      <class name="testClasses.QueueTests">
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:30:23 EDT" name="startTest" finished-at="2025-05-19T14:30:29 EDT" duration-ms="5644" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testUserSignIn() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:30:29 EDT" name="setUp" finished-at="2025-05-19T14:30:42 EDT" duration-ms="13333" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testUserSignIn()[pri:1, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:30:42 EDT" name="testUserSignIn" finished-at="2025-05-19T14:31:03 EDT" duration-ms="21047" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for element to be clickable: Proxy element for: DefaultElementLocator 'By.xpath: //div[@class='navbar-nav']//a[@href='/login']' (tried for 10 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for element to be clickable: Proxy element for: DefaultElementLocator 'By.xpath: //div[@class='navbar-nav']//a[@href='/login']' (tried for 10 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at dsAlgoPageObjects.HomePageObj.clickSignInLink(HomePageObj.java:186)
at testClasses.QueueTests.testUserSignIn(QueueTests.java:68)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at org.testng.internal.thread.graph.TestNGFutureTask.run(TestNGFutureTask.java:22)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//div[@class='navbar-nav']//a[@href='/login']"}
  (Session info: chrome=136.0.7103.114)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.20.0', revision: '866c76ca80'
System info: os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '15.1.1', java.version: '23.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [acb6ab661ce46c8ce826b7ad2852fd10, findElement {using=xpath, value=//div[@class='navbar-nav']//a[@href='/login']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.114, chrome: {chromedriverVersion: 136.0.7103.94 (fa0be0b33deb..., userDataDir: /var/folders/49/t7zfzxpj60s...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:60931}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: mac, proxy: Proxy(), se:cdp: ws://localhost:60931/devtoo..., se:cdpVersion: 136.0.7103.114, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: acb6ab661ce46c8ce826b7ad2852fd10
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:501)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:485)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy17.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.ExpectedConditions$23.apply(ExpectedConditions.java:656)
at org.openqa.selenium.support.ui.ExpectedConditions$23.apply(ExpectedConditions.java:652)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 18 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserSignIn -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:31:03 EDT" name="tearDown" finished-at="2025-05-19T14:31:03 EDT" duration-ms="185" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:31:03 EDT" name="screenShot" finished-at="2025-05-19T14:31:03 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testUserSignIn status=FAILURE method=QueueTests.testUserSignIn()[pri:1, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:31:03 EDT" name="startTest" finished-at="2025-05-19T14:31:07 EDT" duration-ms="3735" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testNavigateToImplementationofQueueinPythonPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:31:07 EDT" name="setUp" finished-at="2025-05-19T14:31:11 EDT" duration-ms="3514" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNavigateToImplementationofQueueinPythonPage()[pri:2, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:31:11 EDT" name="testNavigateToImplementationofQueueinPythonPage" finished-at="2025-05-19T14:31:11 EDT" duration-ms="394" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavigateToImplementationofQueueinPythonPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:31:11 EDT" name="tearDown" finished-at="2025-05-19T14:31:11 EDT" duration-ms="131" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:31:11 EDT" name="screenShot" finished-at="2025-05-19T14:31:11 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testNavigateToImplementationofQueueinPythonPage status=SUCCESS method=QueueTests.testNavigateToImplementationofQueueinPythonPage()[pri:2, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:31:11 EDT" name="startTest" finished-at="2025-05-19T14:31:18 EDT" duration-ms="6885" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testImplementationofQueueinPythonPageNavigation()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:31:18 EDT" name="setUp" finished-at="2025-05-19T14:31:22 EDT" duration-ms="3526" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testImplementationofQueueinPythonPageNavigation()[pri:3, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:31:22 EDT" name="testImplementationofQueueinPythonPageNavigation" finished-at="2025-05-19T14:31:29 EDT" duration-ms="6888" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImplementationofQueueinPythonPageNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:31:29 EDT" name="tearDown" finished-at="2025-05-19T14:31:29 EDT" duration-ms="323" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:31:29 EDT" name="screenShot" finished-at="2025-05-19T14:31:29 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testImplementationofQueueinPythonPageNavigation status=SUCCESS method=QueueTests.testImplementationofQueueinPythonPageNavigation()[pri:3, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:31:29 EDT" name="startTest" finished-at="2025-05-19T14:31:34 EDT" duration-ms="5206" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testTryHereButtonImplementationOfQueueInPython()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:31:34 EDT" name="setUp" finished-at="2025-05-19T14:31:38 EDT" duration-ms="3646" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testTryHereButtonImplementationOfQueueInPython()[pri:4, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:31:38 EDT" name="testTryHereButtonImplementationOfQueueInPython" finished-at="2025-05-19T14:31:45 EDT" duration-ms="7114" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTryHereButtonImplementationOfQueueInPython -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:31:45 EDT" name="tearDown" finished-at="2025-05-19T14:31:45 EDT" duration-ms="189" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:31:45 EDT" name="screenShot" finished-at="2025-05-19T14:31:45 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testTryHereButtonImplementationOfQueueInPython status=SUCCESS method=QueueTests.testTryHereButtonImplementationOfQueueInPython()[pri:4, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:31:45 EDT" name="startTest" finished-at="2025-05-19T14:31:52 EDT" duration-ms="6485" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testInvalidCodeRunImplementationofQueuePythonPage(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:31:52 EDT" name="setUp" finished-at="2025-05-19T14:31:58 EDT" duration-ms="6061" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidCodeRunImplementationofQueuePythonPage(java.lang.String,int,java.lang.String)[pri:5, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:31:58 EDT" name="testInvalidCodeRunImplementationofQueuePythonPage" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:32:01 EDT" duration-ms="3628" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidCodeRunImplementationofQueuePythonPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:01 EDT" name="tearDown" finished-at="2025-05-19T14:32:01 EDT" duration-ms="230" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:01 EDT" name="screenShot" finished-at="2025-05-19T14:32:01 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidCodeRunImplementationofQueuePythonPage status=SUCCESS method=QueueTests.testInvalidCodeRunImplementationofQueuePythonPage(java.lang.String,int,java.lang.String)[pri:5, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:01 EDT" name="startTest" finished-at="2025-05-19T14:32:06 EDT" duration-ms="4840" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testValidCodeRunImplementationofQueuePythonPage(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:06 EDT" name="setUp" finished-at="2025-05-19T14:32:10 EDT" duration-ms="3543" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testValidCodeRunImplementationofQueuePythonPage(java.lang.String,int,java.lang.String)[pri:6, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:10 EDT" name="testValidCodeRunImplementationofQueuePythonPage" data-provider="ValidPythonCode" finished-at="2025-05-19T14:32:12 EDT" duration-ms="2163" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidCodeRunImplementationofQueuePythonPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:12 EDT" name="tearDown" finished-at="2025-05-19T14:32:12 EDT" duration-ms="194" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:12 EDT" name="screenShot" finished-at="2025-05-19T14:32:12 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testValidCodeRunImplementationofQueuePythonPage status=SUCCESS method=QueueTests.testValidCodeRunImplementationofQueuePythonPage(java.lang.String,int,java.lang.String)[pri:6, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:12 EDT" name="startTest" finished-at="2025-05-19T14:32:17 EDT" duration-ms="4923" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testPracticeQuestionsLinkImplementaionofQueuePythonPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:17 EDT" name="setUp" finished-at="2025-05-19T14:32:22 EDT" duration-ms="4977" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPracticeQuestionsLinkImplementaionofQueuePythonPage()[pri:7, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:22 EDT" name="testPracticeQuestionsLinkImplementaionofQueuePythonPage" finished-at="2025-05-19T14:32:29 EDT" duration-ms="6441" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPracticeQuestionsLinkImplementaionofQueuePythonPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:29 EDT" name="tearDown" finished-at="2025-05-19T14:32:29 EDT" duration-ms="206" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:29 EDT" name="screenShot" finished-at="2025-05-19T14:32:29 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testPracticeQuestionsLinkImplementaionofQueuePythonPage status=SUCCESS method=QueueTests.testPracticeQuestionsLinkImplementaionofQueuePythonPage()[pri:7, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:29 EDT" name="startTest" finished-at="2025-05-19T14:32:34 EDT" duration-ms="5629" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testNavigateToImplementationusingCollectionsPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:34 EDT" name="setUp" finished-at="2025-05-19T14:32:45 EDT" duration-ms="10490" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNavigateToImplementationusingCollectionsPage()[pri:8, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:45 EDT" name="testNavigateToImplementationusingCollectionsPage" finished-at="2025-05-19T14:32:46 EDT" duration-ms="798" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavigateToImplementationusingCollectionsPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:46 EDT" name="tearDown" finished-at="2025-05-19T14:32:46 EDT" duration-ms="215" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:46 EDT" name="screenShot" finished-at="2025-05-19T14:32:46 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testNavigateToImplementationusingCollectionsPage status=SUCCESS method=QueueTests.testNavigateToImplementationusingCollectionsPage()[pri:8, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:46 EDT" name="startTest" finished-at="2025-05-19T14:32:50 EDT" duration-ms="4128" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testImplementationusingCollectionsPageNavigation()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:50 EDT" name="setUp" finished-at="2025-05-19T14:32:53 EDT" duration-ms="2860" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testImplementationusingCollectionsPageNavigation()[pri:9, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:53 EDT" name="testImplementationusingCollectionsPageNavigation" finished-at="2025-05-19T14:32:59 EDT" duration-ms="5810" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImplementationusingCollectionsPageNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:59 EDT" name="tearDown" finished-at="2025-05-19T14:32:59 EDT" duration-ms="210" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:59 EDT" name="screenShot" finished-at="2025-05-19T14:32:59 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testImplementationusingCollectionsPageNavigation status=SUCCESS method=QueueTests.testImplementationusingCollectionsPageNavigation()[pri:9, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:32:59 EDT" name="startTest" finished-at="2025-05-19T14:33:02 EDT" duration-ms="3361" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testTryHereButtonImplementationusingCollections()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:02 EDT" name="setUp" finished-at="2025-05-19T14:33:05 EDT" duration-ms="3105" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testTryHereButtonImplementationusingCollections()[pri:10, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:05 EDT" name="testTryHereButtonImplementationusingCollections" finished-at="2025-05-19T14:33:12 EDT" duration-ms="7043" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTryHereButtonImplementationusingCollections -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:12 EDT" name="tearDown" finished-at="2025-05-19T14:33:13 EDT" duration-ms="182" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:13 EDT" name="screenShot" finished-at="2025-05-19T14:33:13 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testTryHereButtonImplementationusingCollections status=SUCCESS method=QueueTests.testTryHereButtonImplementationusingCollections()[pri:10, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:13 EDT" name="startTest" finished-at="2025-05-19T14:33:16 EDT" duration-ms="3195" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testInvalidCodeRunImplementationusingCollectionsPage(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:16 EDT" name="setUp" finished-at="2025-05-19T14:33:19 EDT" duration-ms="2972" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidCodeRunImplementationusingCollectionsPage(java.lang.String,int,java.lang.String)[pri:11, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:19 EDT" name="testInvalidCodeRunImplementationusingCollectionsPage" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:33:21 EDT" duration-ms="1973" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidCodeRunImplementationusingCollectionsPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:21 EDT" name="tearDown" finished-at="2025-05-19T14:33:21 EDT" duration-ms="157" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:21 EDT" name="screenShot" finished-at="2025-05-19T14:33:21 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidCodeRunImplementationusingCollectionsPage status=SUCCESS method=QueueTests.testInvalidCodeRunImplementationusingCollectionsPage(java.lang.String,int,java.lang.String)[pri:11, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:21 EDT" name="startTest" finished-at="2025-05-19T14:33:24 EDT" duration-ms="2610" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testValidCodeRunImplementationusingCollectionsPage(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:24 EDT" name="setUp" finished-at="2025-05-19T14:33:28 EDT" duration-ms="4314" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testValidCodeRunImplementationusingCollectionsPage(java.lang.String,int,java.lang.String)[pri:12, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:28 EDT" name="testValidCodeRunImplementationusingCollectionsPage" data-provider="ValidPythonCode" finished-at="2025-05-19T14:33:30 EDT" duration-ms="2036" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidCodeRunImplementationusingCollectionsPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:30 EDT" name="tearDown" finished-at="2025-05-19T14:33:30 EDT" duration-ms="172" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:30 EDT" name="screenShot" finished-at="2025-05-19T14:33:30 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testValidCodeRunImplementationusingCollectionsPage status=SUCCESS method=QueueTests.testValidCodeRunImplementationusingCollectionsPage(java.lang.String,int,java.lang.String)[pri:12, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:30 EDT" name="startTest" finished-at="2025-05-19T14:33:34 EDT" duration-ms="3481" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testPracticeQuestionsLinkImplementaionusingCollectionsPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:34 EDT" name="setUp" finished-at="2025-05-19T14:33:45 EDT" duration-ms="11259" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPracticeQuestionsLinkImplementaionusingCollectionsPage()[pri:13, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:45 EDT" name="testPracticeQuestionsLinkImplementaionusingCollectionsPage" finished-at="2025-05-19T14:33:46 EDT" duration-ms="1108" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPracticeQuestionsLinkImplementaionusingCollectionsPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:46 EDT" name="tearDown" finished-at="2025-05-19T14:33:46 EDT" duration-ms="124" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:46 EDT" name="screenShot" finished-at="2025-05-19T14:33:46 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testPracticeQuestionsLinkImplementaionusingCollectionsPage status=SUCCESS method=QueueTests.testPracticeQuestionsLinkImplementaionusingCollectionsPage()[pri:13, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:46 EDT" name="startTest" finished-at="2025-05-19T14:33:49 EDT" duration-ms="3123" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testNavigateToImplementationusingArrayPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:49 EDT" name="setUp" finished-at="2025-05-19T14:33:54 EDT" duration-ms="4887" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNavigateToImplementationusingArrayPage()[pri:14, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:54 EDT" name="testNavigateToImplementationusingArrayPage" finished-at="2025-05-19T14:33:59 EDT" duration-ms="5291" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavigateToImplementationusingArrayPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:33:59 EDT" name="tearDown" finished-at="2025-05-19T14:34:00 EDT" duration-ms="164" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:00 EDT" name="screenShot" finished-at="2025-05-19T14:34:00 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testNavigateToImplementationusingArrayPage status=SUCCESS method=QueueTests.testNavigateToImplementationusingArrayPage()[pri:14, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:00 EDT" name="startTest" finished-at="2025-05-19T14:34:02 EDT" duration-ms="2733" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testImplementationusingArrayPageNavigation()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:02 EDT" name="setUp" finished-at="2025-05-19T14:34:06 EDT" duration-ms="3753" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testImplementationusingArrayPageNavigation()[pri:15, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:06 EDT" name="testImplementationusingArrayPageNavigation" finished-at="2025-05-19T14:34:07 EDT" duration-ms="885" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImplementationusingArrayPageNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:07 EDT" name="tearDown" finished-at="2025-05-19T14:34:07 EDT" duration-ms="181" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:07 EDT" name="screenShot" finished-at="2025-05-19T14:34:07 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testImplementationusingArrayPageNavigation status=SUCCESS method=QueueTests.testImplementationusingArrayPageNavigation()[pri:15, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:07 EDT" name="startTest" finished-at="2025-05-19T14:34:09 EDT" duration-ms="2296" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testTryHereButtonImplementationusingArray()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:09 EDT" name="setUp" finished-at="2025-05-19T14:34:14 EDT" duration-ms="4401" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testTryHereButtonImplementationusingArray()[pri:16, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:14 EDT" name="testTryHereButtonImplementationusingArray" finished-at="2025-05-19T14:34:21 EDT" duration-ms="6702" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTryHereButtonImplementationusingArray -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:21 EDT" name="tearDown" finished-at="2025-05-19T14:34:21 EDT" duration-ms="321" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:21 EDT" name="screenShot" finished-at="2025-05-19T14:34:21 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testTryHereButtonImplementationusingArray status=SUCCESS method=QueueTests.testTryHereButtonImplementationusingArray()[pri:16, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:21 EDT" name="startTest" finished-at="2025-05-19T14:34:24 EDT" duration-ms="2812" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testInvalidCodeRunImplementationusingArrayPage(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:24 EDT" name="setUp" finished-at="2025-05-19T14:34:28 EDT" duration-ms="4265" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidCodeRunImplementationusingArrayPage(java.lang.String,int,java.lang.String)[pri:17, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:28 EDT" name="testInvalidCodeRunImplementationusingArrayPage" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:34:36 EDT" duration-ms="7627" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidCodeRunImplementationusingArrayPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:36 EDT" name="tearDown" finished-at="2025-05-19T14:34:36 EDT" duration-ms="258" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:36 EDT" name="screenShot" finished-at="2025-05-19T14:34:36 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidCodeRunImplementationusingArrayPage status=SUCCESS method=QueueTests.testInvalidCodeRunImplementationusingArrayPage(java.lang.String,int,java.lang.String)[pri:17, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:36 EDT" name="startTest" finished-at="2025-05-19T14:34:39 EDT" duration-ms="2859" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testValidCodeRunImplementationusingArrayPage(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:39 EDT" name="setUp" finished-at="2025-05-19T14:34:43 EDT" duration-ms="4340" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testValidCodeRunImplementationusingArrayPage(java.lang.String,int,java.lang.String)[pri:18, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:43 EDT" name="testValidCodeRunImplementationusingArrayPage" data-provider="ValidPythonCode" finished-at="2025-05-19T14:34:50 EDT" duration-ms="6931" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidCodeRunImplementationusingArrayPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:50 EDT" name="tearDown" finished-at="2025-05-19T14:34:50 EDT" duration-ms="192" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:50 EDT" name="screenShot" finished-at="2025-05-19T14:34:50 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testValidCodeRunImplementationusingArrayPage status=SUCCESS method=QueueTests.testValidCodeRunImplementationusingArrayPage(java.lang.String,int,java.lang.String)[pri:18, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:50 EDT" name="startTest" finished-at="2025-05-19T14:34:53 EDT" duration-ms="2482" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testPracticeQuestionsLinkImplementaionusingArrayPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:53 EDT" name="setUp" finished-at="2025-05-19T14:34:56 EDT" duration-ms="3046" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPracticeQuestionsLinkImplementaionusingArrayPage()[pri:19, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:56 EDT" name="testPracticeQuestionsLinkImplementaionusingArrayPage" finished-at="2025-05-19T14:34:57 EDT" duration-ms="871" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPracticeQuestionsLinkImplementaionusingArrayPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:57 EDT" name="tearDown" finished-at="2025-05-19T14:34:57 EDT" duration-ms="124" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:57 EDT" name="screenShot" finished-at="2025-05-19T14:34:57 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testPracticeQuestionsLinkImplementaionusingArrayPage status=SUCCESS method=QueueTests.testPracticeQuestionsLinkImplementaionusingArrayPage()[pri:19, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:57 EDT" name="startTest" finished-at="2025-05-19T14:34:59 EDT" duration-ms="2117" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testNavigateToQueueOperationsPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:34:59 EDT" name="setUp" finished-at="2025-05-19T14:35:08 EDT" duration-ms="9243" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNavigateToQueueOperationsPage()[pri:20, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:35:08 EDT" name="testNavigateToQueueOperationsPage" finished-at="2025-05-19T14:35:08 EDT" duration-ms="337" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavigateToQueueOperationsPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:35:08 EDT" name="tearDown" finished-at="2025-05-19T14:35:09 EDT" duration-ms="125" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:35:09 EDT" name="screenShot" finished-at="2025-05-19T14:35:09 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testNavigateToQueueOperationsPage status=SUCCESS method=QueueTests.testNavigateToQueueOperationsPage()[pri:20, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:35:09 EDT" name="startTest" finished-at="2025-05-19T14:35:11 EDT" duration-ms="2824" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testQueueOperationsPageNavigation()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:35:11 EDT" name="setUp" finished-at="2025-05-19T14:35:20 EDT" duration-ms="8176" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testQueueOperationsPageNavigation()[pri:21, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:35:20 EDT" name="testQueueOperationsPageNavigation" finished-at="2025-05-19T14:35:51 EDT" duration-ms="30980" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //*[@id='content']/a' (tried for 20 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //*[@id='content']/a' (tried for 20 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at dsAlgoPageObjects.QueuePageObj.clickQueueOperationslink(QueuePageObj.java:71)
at testClasses.QueueTests.testQueueOperationsPageNavigation(QueueTests.java:258)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at org.testng.internal.thread.graph.TestNGFutureTask.run(TestNGFutureTask.java:22)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//*[@id='content']/a"}
  (Session info: chrome=136.0.7103.114)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.20.0', revision: '866c76ca80'
System info: os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '15.1.1', java.version: '23.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [058e26defcd839653261da750139013d, findElement {using=xpath, value=//*[@id='content']/a}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.114, chrome: {chromedriverVersion: 136.0.7103.94 (fa0be0b33deb..., userDataDir: /var/folders/49/t7zfzxpj60s...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:64347}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: mac, proxy: Proxy(), se:cdp: ws://localhost:64347/devtoo..., se:cdpVersion: 136.0.7103.114, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 058e26defcd839653261da750139013d
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:501)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:485)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy17.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 18 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testQueueOperationsPageNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:35:51 EDT" name="tearDown" finished-at="2025-05-19T14:35:51 EDT" duration-ms="129" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:35:51 EDT" name="screenShot" finished-at="2025-05-19T14:35:51 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testQueueOperationsPageNavigation status=FAILURE method=QueueTests.testQueueOperationsPageNavigation()[pri:21, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:35:51 EDT" name="startTest" finished-at="2025-05-19T14:35:53 EDT" duration-ms="2626" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testTryHereButtonQueueOperations()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:35:53 EDT" name="setUp" finished-at="2025-05-19T14:35:56 EDT" duration-ms="2819" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testTryHereButtonQueueOperations()[pri:22, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:35:56 EDT" name="testTryHereButtonQueueOperations" finished-at="2025-05-19T14:36:27 EDT" duration-ms="30863" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //*[@id='content']/a' (tried for 20 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //*[@id='content']/a' (tried for 20 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at dsAlgoPageObjects.QueuePageObj.clickQueueOperationslink(QueuePageObj.java:71)
at testClasses.QueueTests.testTryHereButtonQueueOperations(QueueTests.java:265)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at org.testng.internal.thread.graph.TestNGFutureTask.run(TestNGFutureTask.java:22)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//*[@id='content']/a"}
  (Session info: chrome=136.0.7103.114)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.20.0', revision: '866c76ca80'
System info: os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '15.1.1', java.version: '23.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [a761558d7844a5fb2ff0a6ca3de3d470, findElement {using=xpath, value=//*[@id='content']/a}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.114, chrome: {chromedriverVersion: 136.0.7103.94 (fa0be0b33deb..., userDataDir: /var/folders/49/t7zfzxpj60s...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:64585}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: mac, proxy: Proxy(), se:cdp: ws://localhost:64585/devtoo..., se:cdpVersion: 136.0.7103.114, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: a761558d7844a5fb2ff0a6ca3de3d470
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:501)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:485)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy17.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 18 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTryHereButtonQueueOperations -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:36:27 EDT" name="tearDown" finished-at="2025-05-19T14:36:27 EDT" duration-ms="144" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:36:27 EDT" name="screenShot" finished-at="2025-05-19T14:36:27 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testTryHereButtonQueueOperations status=FAILURE method=QueueTests.testTryHereButtonQueueOperations()[pri:22, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:36:27 EDT" name="startTest" finished-at="2025-05-19T14:36:29 EDT" duration-ms="2292" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testInvalidCodeRunQueueOperationsPage(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:36:29 EDT" name="setUp" finished-at="2025-05-19T14:36:32 EDT" duration-ms="2121" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidCodeRunQueueOperationsPage(java.lang.String,int,java.lang.String)[pri:23, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:36:32 EDT" name="testInvalidCodeRunQueueOperationsPage" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:37:07 EDT" duration-ms="35895" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //*[@id='content']/a' (tried for 20 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //*[@id='content']/a' (tried for 20 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at dsAlgoPageObjects.QueuePageObj.clickQueueOperationslink(QueuePageObj.java:71)
at testClasses.QueueTests.testInvalidCodeRunQueueOperationsPage(QueueTests.java:274)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at org.testng.internal.thread.graph.TestNGFutureTask.run(TestNGFutureTask.java:22)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//*[@id='content']/a"}
  (Session info: chrome=136.0.7103.114)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.20.0', revision: '866c76ca80'
System info: os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '15.1.1', java.version: '23.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [7c0c486f8ce7c9b3c5e2ac0132aaf75d, findElement {using=xpath, value=//*[@id='content']/a}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.114, chrome: {chromedriverVersion: 136.0.7103.94 (fa0be0b33deb..., userDataDir: /var/folders/49/t7zfzxpj60s...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:64720}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: mac, proxy: Proxy(), se:cdp: ws://localhost:64720/devtoo..., se:cdpVersion: 136.0.7103.114, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 7c0c486f8ce7c9b3c5e2ac0132aaf75d
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:501)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:485)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy17.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 18 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidCodeRunQueueOperationsPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:37:07 EDT" name="tearDown" finished-at="2025-05-19T14:37:08 EDT" duration-ms="173" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:37:08 EDT" name="screenShot" finished-at="2025-05-19T14:37:08 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidCodeRunQueueOperationsPage status=FAILURE method=QueueTests.testInvalidCodeRunQueueOperationsPage(java.lang.String,int,java.lang.String)[pri:23, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:37:08 EDT" name="startTest" finished-at="2025-05-19T14:37:10 EDT" duration-ms="2375" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testValidCodeRunQueueOperationsPage(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:37:10 EDT" name="setUp" finished-at="2025-05-19T14:37:14 EDT" duration-ms="3972" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testValidCodeRunQueueOperationsPage(java.lang.String,int,java.lang.String)[pri:24, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:37:14 EDT" name="testValidCodeRunQueueOperationsPage" data-provider="ValidPythonCode" finished-at="2025-05-19T14:37:50 EDT" duration-ms="36066" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //*[@id='content']/a' (tried for 20 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //*[@id='content']/a' (tried for 20 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at dsAlgoPageObjects.QueuePageObj.clickQueueOperationslink(QueuePageObj.java:71)
at testClasses.QueueTests.testValidCodeRunQueueOperationsPage(QueueTests.java:288)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at org.testng.internal.thread.graph.TestNGFutureTask.run(TestNGFutureTask.java:22)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//*[@id='content']/a"}
  (Session info: chrome=136.0.7103.114)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.20.0', revision: '866c76ca80'
System info: os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '15.1.1', java.version: '23.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [7f6e6c0c511af82a574b3ed80d0d42a5, findElement {using=xpath, value=//*[@id='content']/a}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.114, chrome: {chromedriverVersion: 136.0.7103.94 (fa0be0b33deb..., userDataDir: /var/folders/49/t7zfzxpj60s...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:64893}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: mac, proxy: Proxy(), se:cdp: ws://localhost:64893/devtoo..., se:cdpVersion: 136.0.7103.114, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 7f6e6c0c511af82a574b3ed80d0d42a5
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:501)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:485)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy17.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 18 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidCodeRunQueueOperationsPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:37:50 EDT" name="tearDown" finished-at="2025-05-19T14:37:50 EDT" duration-ms="165" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:37:50 EDT" name="screenShot" finished-at="2025-05-19T14:37:50 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testValidCodeRunQueueOperationsPage status=FAILURE method=QueueTests.testValidCodeRunQueueOperationsPage(java.lang.String,int,java.lang.String)[pri:24, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:37:50 EDT" name="startTest" finished-at="2025-05-19T14:37:53 EDT" duration-ms="2407" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.QueueTests.testPracticeQuestionsLinkQueueOperationsPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:37:53 EDT" name="setUp" finished-at="2025-05-19T14:37:55 EDT" duration-ms="1968" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPracticeQuestionsLinkQueueOperationsPage()[pri:25, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:37:55 EDT" name="testPracticeQuestionsLinkQueueOperationsPage" finished-at="2025-05-19T14:38:31 EDT" duration-ms="36007" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //*[@id='content']/a' (tried for 20 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //*[@id='content']/a' (tried for 20 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at dsAlgoPageObjects.QueuePageObj.clickQueueOperationslink(QueuePageObj.java:71)
at testClasses.QueueTests.testPracticeQuestionsLinkQueueOperationsPage(QueueTests.java:300)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at org.testng.internal.thread.graph.TestNGFutureTask.run(TestNGFutureTask.java:22)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//*[@id='content']/a"}
  (Session info: chrome=136.0.7103.114)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.20.0', revision: '866c76ca80'
System info: os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '15.1.1', java.version: '23.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [e5c44cd68ff6bde87664f77469fe1582, findElement {using=xpath, value=//*[@id='content']/a}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.114, chrome: {chromedriverVersion: 136.0.7103.94 (fa0be0b33deb..., userDataDir: /var/folders/49/t7zfzxpj60s...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:65093}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: mac, proxy: Proxy(), se:cdp: ws://localhost:65093/devtoo..., se:cdpVersion: 136.0.7103.114, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: e5c44cd68ff6bde87664f77469fe1582
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:501)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:485)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy17.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 18 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPracticeQuestionsLinkQueueOperationsPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:38:31 EDT" name="tearDown" finished-at="2025-05-19T14:38:31 EDT" duration-ms="115" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.QueueTests@41294f8]" started-at="2025-05-19T14:38:31 EDT" name="screenShot" finished-at="2025-05-19T14:38:31 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testPracticeQuestionsLinkQueueOperationsPage status=FAILURE method=QueueTests.testPracticeQuestionsLinkQueueOperationsPage()[pri:25, instance:testClasses.QueueTests@41294f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
      </class> <!-- testClasses.QueueTests -->
      <class name="testClasses.StackTests">
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:30:23 EDT" name="startTest" finished-at="2025-05-19T14:30:29 EDT" duration-ms="5646" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.StackTests.testInvalidCodeRunInsideApplications(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:30:29 EDT" name="setUp" finished-at="2025-05-19T14:30:43 EDT" duration-ms="13693" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidCodeRunInsideApplications(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:30:43 EDT" name="testInvalidCodeRunInsideApplications" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:30:50 EDT" duration-ms="7218" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidCodeRunInsideApplications -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:30:50 EDT" name="tearDown" finished-at="2025-05-19T14:30:50 EDT" duration-ms="450" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:30:50 EDT" name="screenShot" finished-at="2025-05-19T14:30:50 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidCodeRunInsideApplications status=SUCCESS method=StackTests.testInvalidCodeRunInsideApplications(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.StackTests@71329995] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:30:50 EDT" name="startTest" finished-at="2025-05-19T14:30:55 EDT" duration-ms="4268" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.StackTests.testInvalidCodeRunInsideOpsStack(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:30:55 EDT" name="setUp" finished-at="2025-05-19T14:30:59 EDT" duration-ms="4455" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidCodeRunInsideOpsStack(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:30:59 EDT" name="testInvalidCodeRunInsideOpsStack" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:31:09 EDT" duration-ms="9567" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidCodeRunInsideOpsStack -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:31:09 EDT" name="tearDown" finished-at="2025-05-19T14:31:09 EDT" duration-ms="481" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:31:09 EDT" name="screenShot" finished-at="2025-05-19T14:31:09 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidCodeRunInsideOpsStack status=SUCCESS method=StackTests.testInvalidCodeRunInsideOpsStack(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.StackTests@71329995] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:31:09 EDT" name="startTest" finished-at="2025-05-19T14:31:15 EDT" duration-ms="5832" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.StackTests.testInvalidCodeStackRepresentation(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:31:15 EDT" name="setUp" finished-at="2025-05-19T14:31:20 EDT" duration-ms="5096" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidCodeStackRepresentation(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:31:20 EDT" name="testInvalidCodeStackRepresentation" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:31:31 EDT" duration-ms="10694" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidCodeStackRepresentation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:31:31 EDT" name="tearDown" finished-at="2025-05-19T14:31:31 EDT" duration-ms="248" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:31:31 EDT" name="screenShot" finished-at="2025-05-19T14:31:31 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidCodeStackRepresentation status=SUCCESS method=StackTests.testInvalidCodeStackRepresentation(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.StackTests@71329995] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:31:31 EDT" name="startTest" finished-at="2025-05-19T14:31:36 EDT" duration-ms="5385" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.StackTests.testValidCodeRunInsideApplications(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:31:36 EDT" name="setUp" finished-at="2025-05-19T14:31:40 EDT" duration-ms="3296" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testValidCodeRunInsideApplications(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:31:40 EDT" name="testValidCodeRunInsideApplications" data-provider="ValidPythonCode" finished-at="2025-05-19T14:31:42 EDT" duration-ms="2640" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidCodeRunInsideApplications -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:31:42 EDT" name="tearDown" finished-at="2025-05-19T14:31:43 EDT" duration-ms="221" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:31:43 EDT" name="screenShot" finished-at="2025-05-19T14:31:43 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testValidCodeRunInsideApplications status=SUCCESS method=StackTests.testValidCodeRunInsideApplications(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.StackTests@71329995] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:31:43 EDT" name="startTest" finished-at="2025-05-19T14:31:47 EDT" duration-ms="4818" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.StackTests.testValidCodeRunInsideOpsStack(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:31:47 EDT" name="setUp" finished-at="2025-05-19T14:31:51 EDT" duration-ms="3517" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testValidCodeRunInsideOpsStack(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:31:51 EDT" name="testValidCodeRunInsideOpsStack" data-provider="ValidPythonCode" finished-at="2025-05-19T14:31:59 EDT" duration-ms="7663" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidCodeRunInsideOpsStack -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:31:59 EDT" name="tearDown" finished-at="2025-05-19T14:31:59 EDT" duration-ms="867" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:31:59 EDT" name="screenShot" finished-at="2025-05-19T14:31:59 EDT" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testValidCodeRunInsideOpsStack status=SUCCESS method=StackTests.testValidCodeRunInsideOpsStack(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.StackTests@71329995] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:31:59 EDT" name="startTest" finished-at="2025-05-19T14:32:04 EDT" duration-ms="4415" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.StackTests.testValidCodeStackRepresentation(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:32:04 EDT" name="setUp" finished-at="2025-05-19T14:32:07 EDT" duration-ms="3560" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testValidCodeStackRepresentation(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:32:07 EDT" name="testValidCodeStackRepresentation" data-provider="ValidPythonCode" finished-at="2025-05-19T14:32:15 EDT" duration-ms="7330" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidCodeStackRepresentation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:32:15 EDT" name="tearDown" finished-at="2025-05-19T14:32:15 EDT" duration-ms="268" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:32:15 EDT" name="screenShot" finished-at="2025-05-19T14:32:15 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testValidCodeStackRepresentation status=SUCCESS method=StackTests.testValidCodeStackRepresentation(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.StackTests@71329995] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:32:15 EDT" name="startTest" finished-at="2025-05-19T14:32:20 EDT" duration-ms="5421" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.StackTests.testPracticeQuestionsApplications()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:32:20 EDT" name="setUp" finished-at="2025-05-19T14:32:24 EDT" duration-ms="3671" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPracticeQuestionsApplications()[pri:3, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:32:24 EDT" name="testPracticeQuestionsApplications" finished-at="2025-05-19T14:32:30 EDT" duration-ms="6232" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPracticeQuestionsApplications -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:32:30 EDT" name="tearDown" finished-at="2025-05-19T14:32:31 EDT" duration-ms="233" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:32:31 EDT" name="screenShot" finished-at="2025-05-19T14:32:31 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testPracticeQuestionsApplications status=SUCCESS method=StackTests.testPracticeQuestionsApplications()[pri:3, instance:testClasses.StackTests@71329995] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:32:31 EDT" name="startTest" finished-at="2025-05-19T14:32:36 EDT" duration-ms="5585" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.StackTests.testPracticeQuestionsOpsStack()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:32:36 EDT" name="setUp" finished-at="2025-05-19T14:32:42 EDT" duration-ms="5877" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPracticeQuestionsOpsStack()[pri:3, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:32:42 EDT" name="testPracticeQuestionsOpsStack" finished-at="2025-05-19T14:32:44 EDT" duration-ms="1563" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPracticeQuestionsOpsStack -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:32:44 EDT" name="tearDown" finished-at="2025-05-19T14:32:44 EDT" duration-ms="166" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:32:44 EDT" name="screenShot" finished-at="2025-05-19T14:32:44 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testPracticeQuestionsOpsStack status=SUCCESS method=StackTests.testPracticeQuestionsOpsStack()[pri:3, instance:testClasses.StackTests@71329995] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:32:44 EDT" name="startTest" finished-at="2025-05-19T14:32:48 EDT" duration-ms="4372" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.StackTests.testPracticeQuestionsImplemntation()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:32:48 EDT" name="setUp" finished-at="2025-05-19T14:32:51 EDT" duration-ms="2790" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPracticeQuestionsImplemntation()[pri:6, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:32:51 EDT" name="testPracticeQuestionsImplemntation" finished-at="2025-05-19T14:32:57 EDT" duration-ms="6149" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPracticeQuestionsImplemntation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:32:57 EDT" name="tearDown" finished-at="2025-05-19T14:32:57 EDT" duration-ms="174" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.StackTests@71329995]" started-at="2025-05-19T14:32:57 EDT" name="screenShot" finished-at="2025-05-19T14:32:57 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testPracticeQuestionsImplemntation status=SUCCESS method=StackTests.testPracticeQuestionsImplemntation()[pri:6, instance:testClasses.StackTests@71329995] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
      </class> <!-- testClasses.StackTests -->
      <class name="testClasses.TreeTests">
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:30:23 EDT" name="startTest" finished-at="2025-05-19T14:30:29 EDT" duration-ms="5637" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.TreeTests.OverviewOfTreesLink(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:30:29 EDT" name="setUpOnce" finished-at="2025-05-19T14:30:42 EDT" duration-ms="13566" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="OverviewOfTreesLink(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:30:42 EDT" name="OverviewOfTreesLink" data-provider="ValidPythonCode" finished-at="2025-05-19T14:30:50 EDT" duration-ms="7621" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- OverviewOfTreesLink -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:30:50 EDT" name="tearDown" finished-at="2025-05-19T14:30:50 EDT" duration-ms="271" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:30:50 EDT" name="screenShot" finished-at="2025-05-19T14:30:50 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=OverviewOfTreesLink status=SUCCESS method=TreeTests.OverviewOfTreesLink(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.TreeTests@119cbf96] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:30:50 EDT" name="startTest" finished-at="2025-05-19T14:30:55 EDT" duration-ms="4116" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.TreeTests.OverviewOfTreesLink1(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:30:55 EDT" name="setUpOnce" finished-at="2025-05-19T14:30:59 EDT" duration-ms="4637" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="OverviewOfTreesLink1(java.lang.String,int,java.lang.String)[pri:2, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:30:59 EDT" name="OverviewOfTreesLink1" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:31:09 EDT" duration-ms="10191" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- OverviewOfTreesLink1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:31:09 EDT" name="tearDown" finished-at="2025-05-19T14:31:10 EDT" duration-ms="265" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:31:10 EDT" name="screenShot" finished-at="2025-05-19T14:31:10 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=OverviewOfTreesLink1 status=SUCCESS method=TreeTests.OverviewOfTreesLink1(java.lang.String,int,java.lang.String)[pri:2, instance:testClasses.TreeTests@119cbf96] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:31:10 EDT" name="startTest" finished-at="2025-05-19T14:31:15 EDT" duration-ms="5606" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.TreeTests.clickTerminologiesLink(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:31:15 EDT" name="setUpOnce" finished-at="2025-05-19T14:31:20 EDT" duration-ms="4963" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="clickTerminologiesLink(java.lang.String,int,java.lang.String)[pri:3, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:31:20 EDT" name="clickTerminologiesLink" data-provider="ValidPythonCode" finished-at="2025-05-19T14:31:32 EDT" duration-ms="12305" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickTerminologiesLink -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:31:32 EDT" name="tearDown" finished-at="2025-05-19T14:31:33 EDT" duration-ms="418" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:31:33 EDT" name="screenShot" finished-at="2025-05-19T14:31:33 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickTerminologiesLink status=SUCCESS method=TreeTests.clickTerminologiesLink(java.lang.String,int,java.lang.String)[pri:3, instance:testClasses.TreeTests@119cbf96] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:31:33 EDT" name="startTest" finished-at="2025-05-19T14:31:38 EDT" duration-ms="4859" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.TreeTests.clickTerminologiesLink1(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:31:38 EDT" name="setUpOnce" finished-at="2025-05-19T14:31:41 EDT" duration-ms="3288" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="clickTerminologiesLink1(java.lang.String,int,java.lang.String)[pri:4, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:31:41 EDT" name="clickTerminologiesLink1" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:31:44 EDT" duration-ms="2628" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickTerminologiesLink1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:31:44 EDT" name="tearDown" finished-at="2025-05-19T14:31:44 EDT" duration-ms="308" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:31:44 EDT" name="screenShot" finished-at="2025-05-19T14:31:44 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickTerminologiesLink1 status=SUCCESS method=TreeTests.clickTerminologiesLink1(java.lang.String,int,java.lang.String)[pri:4, instance:testClasses.TreeTests@119cbf96] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:31:44 EDT" name="startTest" finished-at="2025-05-19T14:31:49 EDT" duration-ms="5115" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.TreeTests.clickTypesOfTreesLink(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:31:49 EDT" name="setUpOnce" finished-at="2025-05-19T14:31:53 EDT" duration-ms="4155" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="clickTypesOfTreesLink(java.lang.String,int,java.lang.String)[pri:5, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:31:53 EDT" name="clickTypesOfTreesLink" data-provider="ValidPythonCode" finished-at="2025-05-19T14:32:03 EDT" duration-ms="9697" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickTypesOfTreesLink -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:32:03 EDT" name="tearDown" finished-at="2025-05-19T14:32:03 EDT" duration-ms="240" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:32:03 EDT" name="screenShot" finished-at="2025-05-19T14:32:03 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickTypesOfTreesLink status=SUCCESS method=TreeTests.clickTypesOfTreesLink(java.lang.String,int,java.lang.String)[pri:5, instance:testClasses.TreeTests@119cbf96] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:32:03 EDT" name="startTest" finished-at="2025-05-19T14:32:09 EDT" duration-ms="5606" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.TreeTests.clickTypesOfTreesLink1(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:32:09 EDT" name="setUpOnce" finished-at="2025-05-19T14:32:17 EDT" duration-ms="8374" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="clickTypesOfTreesLink1(java.lang.String,int,java.lang.String)[pri:6, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:32:17 EDT" name="clickTypesOfTreesLink1" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:32:20 EDT" duration-ms="2387" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickTypesOfTreesLink1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:32:20 EDT" name="tearDown" finished-at="2025-05-19T14:32:20 EDT" duration-ms="204" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:32:20 EDT" name="screenShot" finished-at="2025-05-19T14:32:20 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickTypesOfTreesLink1 status=SUCCESS method=TreeTests.clickTypesOfTreesLink1(java.lang.String,int,java.lang.String)[pri:6, instance:testClasses.TreeTests@119cbf96] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:32:20 EDT" name="startTest" finished-at="2025-05-19T14:32:24 EDT" duration-ms="4421" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.TreeTests.clickTreeTraversalsLink(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:32:24 EDT" name="setUpOnce" finished-at="2025-05-19T14:32:30 EDT" duration-ms="5257" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="clickTreeTraversalsLink(java.lang.String,int,java.lang.String)[pri:7, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:32:30 EDT" name="clickTreeTraversalsLink" data-provider="ValidPythonCode" finished-at="2025-05-19T14:32:33 EDT" duration-ms="3050" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickTreeTraversalsLink -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:32:33 EDT" name="tearDown" finished-at="2025-05-19T14:32:33 EDT" duration-ms="333" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:32:33 EDT" name="screenShot" finished-at="2025-05-19T14:32:33 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickTreeTraversalsLink status=SUCCESS method=TreeTests.clickTreeTraversalsLink(java.lang.String,int,java.lang.String)[pri:7, instance:testClasses.TreeTests@119cbf96] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:32:33 EDT" name="startTest" finished-at="2025-05-19T14:32:38 EDT" duration-ms="4783" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.TreeTests.clickTreeTraversalsLink1(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:32:38 EDT" name="setUpOnce" finished-at="2025-05-19T14:32:42 EDT" duration-ms="4733" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="clickTreeTraversalsLink1(java.lang.String,int,java.lang.String)[pri:8, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:32:42 EDT" name="clickTreeTraversalsLink1" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:32:45 EDT" duration-ms="3032" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickTreeTraversalsLink1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:32:45 EDT" name="tearDown" finished-at="2025-05-19T14:32:46 EDT" duration-ms="339" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:32:46 EDT" name="screenShot" finished-at="2025-05-19T14:32:46 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickTreeTraversalsLink1 status=SUCCESS method=TreeTests.clickTreeTraversalsLink1(java.lang.String,int,java.lang.String)[pri:8, instance:testClasses.TreeTests@119cbf96] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:32:46 EDT" name="startTest" finished-at="2025-05-19T14:32:50 EDT" duration-ms="4507" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.TreeTests.clickTraversalsIllustrationsLink(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:32:50 EDT" name="setUpOnce" finished-at="2025-05-19T14:32:54 EDT" duration-ms="3203" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="clickTraversalsIllustrationsLink(java.lang.String,int,java.lang.String)[pri:9, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:32:54 EDT" name="clickTraversalsIllustrationsLink" data-provider="ValidPythonCode" finished-at="2025-05-19T14:33:02 EDT" duration-ms="8179" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickTraversalsIllustrationsLink -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:02 EDT" name="tearDown" finished-at="2025-05-19T14:33:02 EDT" duration-ms="248" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:02 EDT" name="screenShot" finished-at="2025-05-19T14:33:02 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickTraversalsIllustrationsLink status=SUCCESS method=TreeTests.clickTraversalsIllustrationsLink(java.lang.String,int,java.lang.String)[pri:9, instance:testClasses.TreeTests@119cbf96] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:02 EDT" name="startTest" finished-at="2025-05-19T14:33:06 EDT" duration-ms="3695" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.TreeTests.clickTraversalsIllustrationsLink1(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:06 EDT" name="setUpOnce" finished-at="2025-05-19T14:33:08 EDT" duration-ms="2505" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="clickTraversalsIllustrationsLink1(java.lang.String,int,java.lang.String)[pri:10, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:08 EDT" name="clickTraversalsIllustrationsLink1" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:33:15 EDT" duration-ms="7188" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickTraversalsIllustrationsLink1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:15 EDT" name="tearDown" finished-at="2025-05-19T14:33:16 EDT" duration-ms="217" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:16 EDT" name="screenShot" finished-at="2025-05-19T14:33:16 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickTraversalsIllustrationsLink1 status=SUCCESS method=TreeTests.clickTraversalsIllustrationsLink1(java.lang.String,int,java.lang.String)[pri:10, instance:testClasses.TreeTests@119cbf96] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:16 EDT" name="startTest" finished-at="2025-05-19T14:33:19 EDT" duration-ms="3417" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.TreeTests.clickBinaryTreesLink(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:19 EDT" name="setUpOnce" finished-at="2025-05-19T14:33:24 EDT" duration-ms="5046" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="clickBinaryTreesLink(java.lang.String,int,java.lang.String)[pri:11, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:24 EDT" name="clickBinaryTreesLink" data-provider="ValidPythonCode" finished-at="2025-05-19T14:33:32 EDT" duration-ms="8146" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickBinaryTreesLink -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:32 EDT" name="tearDown" finished-at="2025-05-19T14:33:33 EDT" duration-ms="396" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:33 EDT" name="screenShot" finished-at="2025-05-19T14:33:33 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickBinaryTreesLink status=SUCCESS method=TreeTests.clickBinaryTreesLink(java.lang.String,int,java.lang.String)[pri:11, instance:testClasses.TreeTests@119cbf96] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:33 EDT" name="startTest" finished-at="2025-05-19T14:33:36 EDT" duration-ms="2963" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.TreeTests.clickBinaryTreesLink1(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:36 EDT" name="setUpOnce" finished-at="2025-05-19T14:33:39 EDT" duration-ms="3276" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="clickBinaryTreesLink1(java.lang.String,int,java.lang.String)[pri:12, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:39 EDT" name="clickBinaryTreesLink1" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:33:46 EDT" duration-ms="6838" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickBinaryTreesLink1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:46 EDT" name="tearDown" finished-at="2025-05-19T14:33:46 EDT" duration-ms="203" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:46 EDT" name="screenShot" finished-at="2025-05-19T14:33:46 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickBinaryTreesLink1 status=SUCCESS method=TreeTests.clickBinaryTreesLink1(java.lang.String,int,java.lang.String)[pri:12, instance:testClasses.TreeTests@119cbf96] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:46 EDT" name="startTest" finished-at="2025-05-19T14:33:49 EDT" duration-ms="3292" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.TreeTests.clickTypesofBinaryTreesLink(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:49 EDT" name="setUpOnce" finished-at="2025-05-19T14:33:52 EDT" duration-ms="2917" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="clickTypesofBinaryTreesLink(java.lang.String,int,java.lang.String)[pri:13, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:52 EDT" name="clickTypesofBinaryTreesLink" data-provider="ValidPythonCode" finished-at="2025-05-19T14:33:54 EDT" duration-ms="2132" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickTypesofBinaryTreesLink -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:54 EDT" name="tearDown" finished-at="2025-05-19T14:33:54 EDT" duration-ms="120" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:54 EDT" name="screenShot" finished-at="2025-05-19T14:33:54 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickTypesofBinaryTreesLink status=SUCCESS method=TreeTests.clickTypesofBinaryTreesLink(java.lang.String,int,java.lang.String)[pri:13, instance:testClasses.TreeTests@119cbf96] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:54 EDT" name="startTest" finished-at="2025-05-19T14:33:57 EDT" duration-ms="2473" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.TreeTests.clickTypesofBinaryTreesLink1(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:33:57 EDT" name="setUpOnce" finished-at="2025-05-19T14:34:00 EDT" duration-ms="3273" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="clickTypesofBinaryTreesLink1(java.lang.String,int,java.lang.String)[pri:14, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:00 EDT" name="clickTypesofBinaryTreesLink1" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:34:02 EDT" duration-ms="2358" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickTypesofBinaryTreesLink1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:02 EDT" name="tearDown" finished-at="2025-05-19T14:34:03 EDT" duration-ms="148" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:03 EDT" name="screenShot" finished-at="2025-05-19T14:34:03 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickTypesofBinaryTreesLink1 status=SUCCESS method=TreeTests.clickTypesofBinaryTreesLink1(java.lang.String,int,java.lang.String)[pri:14, instance:testClasses.TreeTests@119cbf96] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:03 EDT" name="startTest" finished-at="2025-05-19T14:34:06 EDT" duration-ms="3529" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.TreeTests.clickImplementationOfBinaryTreesLink(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:06 EDT" name="setUpOnce" finished-at="2025-05-19T14:34:10 EDT" duration-ms="3390" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="clickImplementationOfBinaryTreesLink(java.lang.String,int,java.lang.String)[pri:15, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:10 EDT" name="clickImplementationOfBinaryTreesLink" data-provider="ValidPythonCode" finished-at="2025-05-19T14:34:17 EDT" duration-ms="7720" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickImplementationOfBinaryTreesLink -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:17 EDT" name="tearDown" finished-at="2025-05-19T14:34:18 EDT" duration-ms="228" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:18 EDT" name="screenShot" finished-at="2025-05-19T14:34:18 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickImplementationOfBinaryTreesLink status=SUCCESS method=TreeTests.clickImplementationOfBinaryTreesLink(java.lang.String,int,java.lang.String)[pri:15, instance:testClasses.TreeTests@119cbf96] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:18 EDT" name="startTest" finished-at="2025-05-19T14:34:20 EDT" duration-ms="2713" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.TreeTests.clickImplementationOfBinaryTreesLink1(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:20 EDT" name="setUpOnce" finished-at="2025-05-19T14:34:23 EDT" duration-ms="2796" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="clickImplementationOfBinaryTreesLink1(java.lang.String,int,java.lang.String)[pri:16, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:23 EDT" name="clickImplementationOfBinaryTreesLink1" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:34:25 EDT" duration-ms="1885" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickImplementationOfBinaryTreesLink1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:25 EDT" name="tearDown" finished-at="2025-05-19T14:34:25 EDT" duration-ms="165" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:25 EDT" name="screenShot" finished-at="2025-05-19T14:34:25 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickImplementationOfBinaryTreesLink1 status=SUCCESS method=TreeTests.clickImplementationOfBinaryTreesLink1(java.lang.String,int,java.lang.String)[pri:16, instance:testClasses.TreeTests@119cbf96] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:25 EDT" name="startTest" finished-at="2025-05-19T14:34:28 EDT" duration-ms="2479" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.TreeTests.clickApplicationOfBinaryTreesLink(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:28 EDT" name="setUpOnce" finished-at="2025-05-19T14:34:30 EDT" duration-ms="2230" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="clickApplicationOfBinaryTreesLink(java.lang.String,int,java.lang.String)[pri:17, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:30 EDT" name="clickApplicationOfBinaryTreesLink" data-provider="ValidPythonCode" finished-at="2025-05-19T14:34:37 EDT" duration-ms="7061" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickApplicationOfBinaryTreesLink -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:37 EDT" name="tearDown" finished-at="2025-05-19T14:34:37 EDT" duration-ms="209" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:37 EDT" name="screenShot" finished-at="2025-05-19T14:34:37 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickApplicationOfBinaryTreesLink status=SUCCESS method=TreeTests.clickApplicationOfBinaryTreesLink(java.lang.String,int,java.lang.String)[pri:17, instance:testClasses.TreeTests@119cbf96] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:37 EDT" name="startTest" finished-at="2025-05-19T14:34:40 EDT" duration-ms="2912" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.TreeTests.clickApplicationOfBinaryTreesLink1(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:40 EDT" name="setUpOnce" finished-at="2025-05-19T14:34:44 EDT" duration-ms="4293" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="clickApplicationOfBinaryTreesLink1(java.lang.String,int,java.lang.String)[pri:18, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:44 EDT" name="clickApplicationOfBinaryTreesLink1" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:34:51 EDT" duration-ms="7155" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickApplicationOfBinaryTreesLink1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:51 EDT" name="tearDown" finished-at="2025-05-19T14:34:52 EDT" duration-ms="186" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:52 EDT" name="screenShot" finished-at="2025-05-19T14:34:52 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickApplicationOfBinaryTreesLink1 status=SUCCESS method=TreeTests.clickApplicationOfBinaryTreesLink1(java.lang.String,int,java.lang.String)[pri:18, instance:testClasses.TreeTests@119cbf96] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:52 EDT" name="startTest" finished-at="2025-05-19T14:34:54 EDT" duration-ms="2757" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.TreeTests.clickBinarySearchTreesLink(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:34:54 EDT" name="setUpOnce" finished-at="2025-05-19T14:35:00 EDT" duration-ms="5447" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="clickBinarySearchTreesLink(java.lang.String,int,java.lang.String)[pri:19, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:35:00 EDT" name="clickBinarySearchTreesLink" data-provider="ValidPythonCode" finished-at="2025-05-19T14:35:07 EDT" duration-ms="7571" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickBinarySearchTreesLink -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:35:07 EDT" name="tearDown" finished-at="2025-05-19T14:35:08 EDT" duration-ms="137" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:35:08 EDT" name="screenShot" finished-at="2025-05-19T14:35:08 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickBinarySearchTreesLink status=SUCCESS method=TreeTests.clickBinarySearchTreesLink(java.lang.String,int,java.lang.String)[pri:19, instance:testClasses.TreeTests@119cbf96] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:35:08 EDT" name="startTest" finished-at="2025-05-19T14:35:10 EDT" duration-ms="2804" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.TreeTests.clickBinarySearchTreesLink1(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:35:10 EDT" name="setUpOnce" finished-at="2025-05-19T14:35:16 EDT" duration-ms="5490" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="clickBinarySearchTreesLink1(java.lang.String,int,java.lang.String)[pri:20, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:35:16 EDT" name="clickBinarySearchTreesLink1" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:35:20 EDT" duration-ms="3941" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickBinarySearchTreesLink1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:35:20 EDT" name="tearDown" finished-at="2025-05-19T14:35:20 EDT" duration-ms="157" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:35:20 EDT" name="screenShot" finished-at="2025-05-19T14:35:20 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickBinarySearchTreesLink1 status=SUCCESS method=TreeTests.clickBinarySearchTreesLink1(java.lang.String,int,java.lang.String)[pri:20, instance:testClasses.TreeTests@119cbf96] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:35:20 EDT" name="startTest" finished-at="2025-05-19T14:35:22 EDT" duration-ms="2138" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.TreeTests.clickImplementationofBTSLink(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:35:22 EDT" name="setUpOnce" finished-at="2025-05-19T14:35:33 EDT" duration-ms="11241" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="clickImplementationofBTSLink(java.lang.String,int,java.lang.String)[pri:21, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:35:33 EDT" name="clickImplementationofBTSLink" data-provider="ValidPythonCode" finished-at="2025-05-19T14:35:40 EDT" duration-ms="6888" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickImplementationofBTSLink -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:35:40 EDT" name="tearDown" finished-at="2025-05-19T14:35:40 EDT" duration-ms="141" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:35:40 EDT" name="screenShot" finished-at="2025-05-19T14:35:40 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickImplementationofBTSLink status=SUCCESS method=TreeTests.clickImplementationofBTSLink(java.lang.String,int,java.lang.String)[pri:21, instance:testClasses.TreeTests@119cbf96] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:35:40 EDT" name="startTest" finished-at="2025-05-19T14:35:42 EDT" duration-ms="2107" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.TreeTests.clickImplementationofBTSLink1(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:35:42 EDT" name="setUpOnce" finished-at="2025-05-19T14:35:47 EDT" duration-ms="4157" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="clickImplementationofBTSLink1(java.lang.String,int,java.lang.String)[pri:22, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:35:47 EDT" name="clickImplementationofBTSLink1" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:35:55 EDT" duration-ms="8267" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickImplementationofBTSLink1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:35:55 EDT" name="tearDown" finished-at="2025-05-19T14:35:55 EDT" duration-ms="227" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.TreeTests@119cbf96]" started-at="2025-05-19T14:35:55 EDT" name="screenShot" finished-at="2025-05-19T14:35:55 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickImplementationofBTSLink1 status=SUCCESS method=TreeTests.clickImplementationofBTSLink1(java.lang.String,int,java.lang.String)[pri:22, instance:testClasses.TreeTests@119cbf96] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
      </class> <!-- testClasses.TreeTests -->
      <class name="testClasses.SignInTests">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.SignInTests@2141a12]" started-at="2025-05-19T14:30:23 EDT" name="setUp" finished-at="2025-05-19T14:30:37 EDT" duration-ms="14303" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testValidLogin(java.lang.String,int)[pri:1, instance:testClasses.SignInTests@2141a12]" started-at="2025-05-19T14:30:37 EDT" name="testValidLogin" data-provider="validLogin" finished-at="2025-05-19T14:30:40 EDT" duration-ms="2916" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Login]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidLogin -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.SignInTests@2141a12]" started-at="2025-05-19T14:30:40 EDT" name="tearDown" finished-at="2025-05-19T14:30:41 EDT" duration-ms="395" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.SignInTests@2141a12]" started-at="2025-05-19T14:30:41 EDT" name="setUp" finished-at="2025-05-19T14:30:47 EDT" duration-ms="6560" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidLogin(java.lang.String,int)[pri:2, instance:testClasses.SignInTests@2141a12]" started-at="2025-05-19T14:30:47 EDT" name="testInvalidLogin" data-provider="InvalidLogin" finished-at="2025-05-19T14:30:56 EDT" duration-ms="8463" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Login]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidLogin -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.SignInTests@2141a12]" started-at="2025-05-19T14:30:56 EDT" name="tearDown" finished-at="2025-05-19T14:30:56 EDT" duration-ms="238" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.SignInTests@2141a12]" started-at="2025-05-19T14:30:56 EDT" name="setUp" finished-at="2025-05-19T14:31:01 EDT" duration-ms="4747" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testEmptyData(java.lang.String,int)[pri:3, instance:testClasses.SignInTests@2141a12]" started-at="2025-05-19T14:31:01 EDT" name="testEmptyData" data-provider="emptydata" finished-at="2025-05-19T14:31:08 EDT" duration-ms="6819" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Login]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmptyData -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.SignInTests@2141a12]" started-at="2025-05-19T14:31:08 EDT" name="tearDown" finished-at="2025-05-19T14:31:08 EDT" duration-ms="722" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- testClasses.SignInTests -->
      <class name="testClasses.RegisterTests">
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.RegisterTests@768fc0f2]" started-at="2025-05-19T14:30:23 EDT" name="startTest" finished-at="2025-05-19T14:30:29 EDT" duration-ms="5454" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.RegisterTests.testValidRegistration(java.lang.String,int) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpRegister()[pri:0, instance:testClasses.RegisterTests@768fc0f2]" started-at="2025-05-19T14:30:29 EDT" name="setUpRegister" finished-at="2025-05-19T14:30:37 EDT" duration-ms="8552" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpRegister -->
        <test-method signature="testValidRegistration(java.lang.String,int)[pri:1, instance:testClasses.RegisterTests@768fc0f2]" started-at="2025-05-19T14:30:37 EDT" name="testValidRegistration" data-provider="validRegisterData" finished-at="2025-05-19T14:30:38 EDT" duration-ms="641" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[Register]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Invalid row index: 3]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Invalid row index: 3
at dsAlgoPageObjects.RegisterPageObj.fillRegistrationForm(RegisterPageObj.java:85)
at testClasses.RegisterTests.testValidRegistration(RegisterTests.java:57)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at org.testng.internal.thread.graph.TestNGFutureTask.run(TestNGFutureTask.java:22)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1575)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidRegistration -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.RegisterTests@768fc0f2]" started-at="2025-05-19T14:30:38 EDT" name="tearDown" finished-at="2025-05-19T14:30:38 EDT" duration-ms="278" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.RegisterTests@768fc0f2]" started-at="2025-05-19T14:30:38 EDT" name="screenShot" finished-at="2025-05-19T14:30:38 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testValidRegistration status=FAILURE method=RegisterTests.testValidRegistration(java.lang.String,int)[pri:1, instance:testClasses.RegisterTests@768fc0f2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.RegisterTests@768fc0f2]" started-at="2025-05-19T14:30:38 EDT" name="startTest" finished-at="2025-05-19T14:30:43 EDT" duration-ms="4259" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.RegisterTests.testPasswordMismatchRegistration(java.lang.String,int) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpRegister()[pri:0, instance:testClasses.RegisterTests@768fc0f2]" started-at="2025-05-19T14:30:43 EDT" name="setUpRegister" finished-at="2025-05-19T14:30:45 EDT" duration-ms="2331" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpRegister -->
        <test-method signature="testPasswordMismatchRegistration(java.lang.String,int)[pri:2, instance:testClasses.RegisterTests@768fc0f2]" started-at="2025-05-19T14:30:45 EDT" name="testPasswordMismatchRegistration" data-provider="passwordMismatchData" finished-at="2025-05-19T14:30:51 EDT" duration-ms="5886" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Register]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPasswordMismatchRegistration -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.RegisterTests@768fc0f2]" started-at="2025-05-19T14:30:51 EDT" name="tearDown" finished-at="2025-05-19T14:30:51 EDT" duration-ms="136" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.RegisterTests@768fc0f2]" started-at="2025-05-19T14:30:51 EDT" name="screenShot" finished-at="2025-05-19T14:30:51 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testPasswordMismatchRegistration status=SUCCESS method=RegisterTests.testPasswordMismatchRegistration(java.lang.String,int)[pri:2, instance:testClasses.RegisterTests@768fc0f2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.RegisterTests@768fc0f2]" started-at="2025-05-19T14:30:51 EDT" name="startTest" finished-at="2025-05-19T14:30:55 EDT" duration-ms="3826" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.RegisterTests.testEmptyUsernameValidation(java.lang.String,int) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpRegister()[pri:0, instance:testClasses.RegisterTests@768fc0f2]" started-at="2025-05-19T14:30:55 EDT" name="setUpRegister" finished-at="2025-05-19T14:30:57 EDT" duration-ms="2518" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpRegister -->
        <test-method signature="testEmptyUsernameValidation(java.lang.String,int)[pri:3, instance:testClasses.RegisterTests@768fc0f2]" started-at="2025-05-19T14:30:57 EDT" name="testEmptyUsernameValidation" data-provider="emptyUsernameData" finished-at="2025-05-19T14:31:03 EDT" duration-ms="5490" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Register]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmptyUsernameValidation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.RegisterTests@768fc0f2]" started-at="2025-05-19T14:31:03 EDT" name="tearDown" finished-at="2025-05-19T14:31:03 EDT" duration-ms="175" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.RegisterTests@768fc0f2]" started-at="2025-05-19T14:31:03 EDT" name="screenShot" finished-at="2025-05-19T14:31:03 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testEmptyUsernameValidation status=SUCCESS method=RegisterTests.testEmptyUsernameValidation(java.lang.String,int)[pri:3, instance:testClasses.RegisterTests@768fc0f2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.RegisterTests@768fc0f2]" started-at="2025-05-19T14:31:03 EDT" name="startTest" finished-at="2025-05-19T14:31:06 EDT" duration-ms="3317" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.RegisterTests.testNumericPasswordValidation(java.lang.String,int) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpRegister()[pri:0, instance:testClasses.RegisterTests@768fc0f2]" started-at="2025-05-19T14:31:06 EDT" name="setUpRegister" finished-at="2025-05-19T14:31:09 EDT" duration-ms="2294" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpRegister -->
        <test-method signature="testNumericPasswordValidation(java.lang.String,int)[pri:4, instance:testClasses.RegisterTests@768fc0f2]" started-at="2025-05-19T14:31:09 EDT" name="testNumericPasswordValidation" data-provider="numericPasswordData" finished-at="2025-05-19T14:31:10 EDT" duration-ms="900" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Register]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNumericPasswordValidation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.RegisterTests@768fc0f2]" started-at="2025-05-19T14:31:10 EDT" name="tearDown" finished-at="2025-05-19T14:31:10 EDT" duration-ms="179" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.RegisterTests@768fc0f2]" started-at="2025-05-19T14:31:10 EDT" name="screenShot" finished-at="2025-05-19T14:31:10 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testNumericPasswordValidation status=SUCCESS method=RegisterTests.testNumericPasswordValidation(java.lang.String,int)[pri:4, instance:testClasses.RegisterTests@768fc0f2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
      </class> <!-- testClasses.RegisterTests -->
      <class name="testClasses.DataStructureTests">
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.DataStructureTests@5454d35e]" started-at="2025-05-19T14:30:23 EDT" name="startTest" finished-at="2025-05-19T14:30:29 EDT" duration-ms="5638" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.DataStructureTests.testInValidOutputforTimeComplexity(java.lang.String,int,java.lang.String) throws java.io.IOException,org.apache.poi.openxml4j.exceptions.OpenXML4JException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpDataStructure()[pri:0, instance:testClasses.DataStructureTests@5454d35e]" started-at="2025-05-19T14:30:29 EDT" name="setUpDataStructure" finished-at="2025-05-19T14:30:43 EDT" duration-ms="13592" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpDataStructure -->
        <test-method signature="testInValidOutputforTimeComplexity(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.DataStructureTests@5454d35e]" started-at="2025-05-19T14:30:43 EDT" name="testInValidOutputforTimeComplexity" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:30:50 EDT" duration-ms="7506" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInValidOutputforTimeComplexity -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.DataStructureTests@5454d35e]" started-at="2025-05-19T14:30:50 EDT" name="tearDown" finished-at="2025-05-19T14:30:50 EDT" duration-ms="370" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.DataStructureTests@5454d35e]" started-at="2025-05-19T14:30:50 EDT" name="screenShot" finished-at="2025-05-19T14:30:50 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInValidOutputforTimeComplexity status=SUCCESS method=DataStructureTests.testInValidOutputforTimeComplexity(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.DataStructureTests@5454d35e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.DataStructureTests@5454d35e]" started-at="2025-05-19T14:30:50 EDT" name="startTest" finished-at="2025-05-19T14:30:55 EDT" duration-ms="4108" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.DataStructureTests.testValidOutputforTimeComplexity1(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpDataStructure()[pri:0, instance:testClasses.DataStructureTests@5454d35e]" started-at="2025-05-19T14:30:55 EDT" name="setUpDataStructure" finished-at="2025-05-19T14:30:59 EDT" duration-ms="4452" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpDataStructure -->
        <test-method signature="testValidOutputforTimeComplexity1(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.DataStructureTests@5454d35e]" started-at="2025-05-19T14:30:59 EDT" name="testValidOutputforTimeComplexity1" data-provider="ValidPythonCode" finished-at="2025-05-19T14:31:08 EDT" duration-ms="9409" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidOutputforTimeComplexity1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.DataStructureTests@5454d35e]" started-at="2025-05-19T14:31:08 EDT" name="tearDown" finished-at="2025-05-19T14:31:09 EDT" duration-ms="467" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.DataStructureTests@5454d35e]" started-at="2025-05-19T14:31:09 EDT" name="screenShot" finished-at="2025-05-19T14:31:09 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testValidOutputforTimeComplexity1 status=SUCCESS method=DataStructureTests.testValidOutputforTimeComplexity1(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.DataStructureTests@5454d35e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
      </class> <!-- testClasses.DataStructureTests -->
      <class name="testClasses.GraphTests">
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:31:08 EDT" name="startTest" finished-at="2025-05-19T14:31:14 EDT" duration-ms="5232" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.GraphTests.testInvalidCodeGraphRepresentation(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:31:14 EDT" name="setUp" finished-at="2025-05-19T14:31:18 EDT" duration-ms="4304" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidCodeGraphRepresentation(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:31:18 EDT" name="testInvalidCodeGraphRepresentation" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:31:27 EDT" duration-ms="9139" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidCodeGraphRepresentation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:31:27 EDT" name="tearDown" finished-at="2025-05-19T14:31:27 EDT" duration-ms="335" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:31:27 EDT" name="screenShot" finished-at="2025-05-19T14:31:27 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidCodeGraphRepresentation status=SUCCESS method=GraphTests.testInvalidCodeGraphRepresentation(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.GraphTests@20c0a64d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:31:27 EDT" name="startTest" finished-at="2025-05-19T14:31:32 EDT" duration-ms="4308" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.GraphTests.testInvalidCodeRunInsideGraph(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:31:32 EDT" name="setUp" finished-at="2025-05-19T14:31:35 EDT" duration-ms="3544" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidCodeRunInsideGraph(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:31:35 EDT" name="testInvalidCodeRunInsideGraph" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:31:43 EDT" duration-ms="7750" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidCodeRunInsideGraph -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:31:43 EDT" name="tearDown" finished-at="2025-05-19T14:31:43 EDT" duration-ms="289" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:31:43 EDT" name="screenShot" finished-at="2025-05-19T14:31:43 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidCodeRunInsideGraph status=SUCCESS method=GraphTests.testInvalidCodeRunInsideGraph(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.GraphTests@20c0a64d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:31:43 EDT" name="startTest" finished-at="2025-05-19T14:31:49 EDT" duration-ms="5989" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.GraphTests.testValidCodeGraphRepresentation(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:31:49 EDT" name="setUp" finished-at="2025-05-19T14:31:54 EDT" duration-ms="4303" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testValidCodeGraphRepresentation(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:31:54 EDT" name="testValidCodeGraphRepresentation" data-provider="ValidPythonCode" finished-at="2025-05-19T14:32:03 EDT" duration-ms="9123" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidCodeGraphRepresentation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:32:03 EDT" name="tearDown" finished-at="2025-05-19T14:32:03 EDT" duration-ms="472" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:32:03 EDT" name="screenShot" finished-at="2025-05-19T14:32:03 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testValidCodeGraphRepresentation status=SUCCESS method=GraphTests.testValidCodeGraphRepresentation(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.GraphTests@20c0a64d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:32:03 EDT" name="startTest" finished-at="2025-05-19T14:32:09 EDT" duration-ms="5489" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.GraphTests.testValidCodeRunInsideGraph(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:32:09 EDT" name="setUp" finished-at="2025-05-19T14:32:14 EDT" duration-ms="5825" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testValidCodeRunInsideGraph(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:32:14 EDT" name="testValidCodeRunInsideGraph" data-provider="ValidPythonCode" finished-at="2025-05-19T14:32:17 EDT" duration-ms="2621" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidCodeRunInsideGraph -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:32:17 EDT" name="tearDown" finished-at="2025-05-19T14:32:18 EDT" duration-ms="520" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:32:18 EDT" name="screenShot" finished-at="2025-05-19T14:32:18 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testValidCodeRunInsideGraph status=SUCCESS method=GraphTests.testValidCodeRunInsideGraph(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.GraphTests@20c0a64d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:32:18 EDT" name="startTest" finished-at="2025-05-19T14:32:23 EDT" duration-ms="5184" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.GraphTests.testPracticeQuestionsLinkInsideGraph()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:32:23 EDT" name="setUp" finished-at="2025-05-19T14:32:27 EDT" duration-ms="3902" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPracticeQuestionsLinkInsideGraph()[pri:3, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:32:27 EDT" name="testPracticeQuestionsLinkInsideGraph" finished-at="2025-05-19T14:32:28 EDT" duration-ms="1456" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPracticeQuestionsLinkInsideGraph -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:32:28 EDT" name="tearDown" finished-at="2025-05-19T14:32:28 EDT" duration-ms="187" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:32:28 EDT" name="screenShot" finished-at="2025-05-19T14:32:28 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testPracticeQuestionsLinkInsideGraph status=SUCCESS method=GraphTests.testPracticeQuestionsLinkInsideGraph()[pri:3, instance:testClasses.GraphTests@20c0a64d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:32:28 EDT" name="startTest" finished-at="2025-05-19T14:32:34 EDT" duration-ms="5729" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.GraphTests.testPracticeQuestionsGraphRepresentation()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:32:34 EDT" name="setUp" finished-at="2025-05-19T14:32:38 EDT" duration-ms="4043" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPracticeQuestionsGraphRepresentation()[pri:6, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:32:38 EDT" name="testPracticeQuestionsGraphRepresentation" finished-at="2025-05-19T14:32:45 EDT" duration-ms="6729" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPracticeQuestionsGraphRepresentation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:32:45 EDT" name="tearDown" finished-at="2025-05-19T14:32:45 EDT" duration-ms="325" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.GraphTests@20c0a64d]" started-at="2025-05-19T14:32:45 EDT" name="screenShot" finished-at="2025-05-19T14:32:45 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testPracticeQuestionsGraphRepresentation status=SUCCESS method=GraphTests.testPracticeQuestionsGraphRepresentation()[pri:6, instance:testClasses.GraphTests@20c0a64d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
      </class> <!-- testClasses.GraphTests -->
      <class name="testClasses.ArrayTests">
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:31:10 EDT" name="startTest" finished-at="2025-05-19T14:31:16 EDT" duration-ms="6181" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.ArrayTests.ArraysinPython(java.lang.String,int,java.lang.String) throws java.io.IOException,org.apache.poi.openxml4j.exceptions.OpenXML4JException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:31:16 EDT" name="setUpOnce" finished-at="2025-05-19T14:31:20 EDT" duration-ms="4337" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="ArraysinPython(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:31:20 EDT" name="ArraysinPython" data-provider="ValidPythonCode" finished-at="2025-05-19T14:31:31 EDT" duration-ms="10880" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ArraysinPython -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:31:31 EDT" name="tearDown" finished-at="2025-05-19T14:31:32 EDT" duration-ms="831" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:31:32 EDT" name="screenShot" finished-at="2025-05-19T14:31:32 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ArraysinPython status=SUCCESS method=ArrayTests.ArraysinPython(java.lang.String,int,java.lang.String)[pri:1, instance:testClasses.ArrayTests@4ddbbdf8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:31:32 EDT" name="startTest" finished-at="2025-05-19T14:31:37 EDT" duration-ms="4546" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.ArrayTests.ArraysinPython1(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:31:37 EDT" name="setUpOnce" finished-at="2025-05-19T14:31:40 EDT" duration-ms="3215" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="ArraysinPython1(java.lang.String,int,java.lang.String)[pri:2, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:31:40 EDT" name="ArraysinPython1" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:31:43 EDT" duration-ms="2928" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ArraysinPython1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:31:43 EDT" name="tearDown" finished-at="2025-05-19T14:31:43 EDT" duration-ms="280" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:31:43 EDT" name="screenShot" finished-at="2025-05-19T14:31:43 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ArraysinPython1 status=SUCCESS method=ArrayTests.ArraysinPython1(java.lang.String,int,java.lang.String)[pri:2, instance:testClasses.ArrayTests@4ddbbdf8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:31:43 EDT" name="startTest" finished-at="2025-05-19T14:31:49 EDT" duration-ms="6150" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.ArrayTests.ArraysUsingList(java.lang.String,int,java.lang.String) throws java.io.IOException,org.apache.poi.openxml4j.exceptions.OpenXML4JException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:31:49 EDT" name="setUpOnce" finished-at="2025-05-19T14:31:53 EDT" duration-ms="4302" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="ArraysUsingList(java.lang.String,int,java.lang.String)[pri:3, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:31:53 EDT" name="ArraysUsingList" data-provider="ValidPythonCode" finished-at="2025-05-19T14:32:02 EDT" duration-ms="8663" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ArraysUsingList -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:32:02 EDT" name="tearDown" finished-at="2025-05-19T14:32:03 EDT" duration-ms="406" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:32:03 EDT" name="screenShot" finished-at="2025-05-19T14:32:03 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ArraysUsingList status=SUCCESS method=ArrayTests.ArraysUsingList(java.lang.String,int,java.lang.String)[pri:3, instance:testClasses.ArrayTests@4ddbbdf8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:32:03 EDT" name="startTest" finished-at="2025-05-19T14:32:07 EDT" duration-ms="4514" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.ArrayTests.ArraysUsingList1(java.lang.String,int,java.lang.String) throws java.io.IOException,org.apache.poi.openxml4j.exceptions.OpenXML4JException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:32:07 EDT" name="setUpOnce" finished-at="2025-05-19T14:32:10 EDT" duration-ms="3341" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="ArraysUsingList1(java.lang.String,int,java.lang.String)[pri:4, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:32:10 EDT" name="ArraysUsingList1" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:32:12 EDT" duration-ms="1955" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.UnhandledAlertException">
            <message>
              <![CDATA[unexpected alert open: {Alert text : SyntaxError: bad input on line 1}
  (Session info: chrome=136.0.7103.114): SyntaxError: bad input on line 1
Build info: version: '4.20.0', revision: '866c76ca80'
System info: os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '15.1.1', java.version: '23.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [bcca98f7a67039c37cdcb0b94aa9a5eb, findElement {using=xpath, value=//button[text()='Run']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.114, chrome: {chromedriverVersion: 136.0.7103.94 (fa0be0b33deb..., userDataDir: /var/folders/49/t7zfzxpj60s...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:62159}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: mac, proxy: Proxy(), se:cdp: ws://localhost:62159/devtoo..., se:cdpVersion: 136.0.7103.114, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: bcca98f7a67039c37cdcb0b94aa9a5eb]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.UnhandledAlertException: unexpected alert open: {Alert text : SyntaxError: bad input on line 1}
  (Session info: chrome=136.0.7103.114): SyntaxError: bad input on line 1
Build info: version: '4.20.0', revision: '866c76ca80'
System info: os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '15.1.1', java.version: '23.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [bcca98f7a67039c37cdcb0b94aa9a5eb, findElement {using=xpath, value=//button[text()='Run']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.114, chrome: {chromedriverVersion: 136.0.7103.94 (fa0be0b33deb..., userDataDir: /var/folders/49/t7zfzxpj60s...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:62159}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: mac, proxy: Proxy(), se:cdp: ws://localhost:62159/devtoo..., se:cdpVersion: 136.0.7103.114, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: bcca98f7a67039c37cdcb0b94aa9a5eb
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:136)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy17.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.ExpectedConditions$23.apply(ExpectedConditions.java:656)
at org.openqa.selenium.support.ui.ExpectedConditions$23.apply(ExpectedConditions.java:652)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
at dsAlgoPageObjects.TryEditorPage.clickRunButton(TryEditorPage.java:52)
at testClasses.ArrayTests.ArraysUsingList1(ArrayTests.java:138)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at org.testng.internal.thread.graph.TestNGFutureTask.run(TestNGFutureTask.java:22)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1575)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.UnhandledAlertException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ArraysUsingList1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:32:12 EDT" name="tearDown" finished-at="2025-05-19T14:32:13 EDT" duration-ms="228" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:32:13 EDT" name="screenShot" finished-at="2025-05-19T14:32:13 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ArraysUsingList1 status=FAILURE method=ArrayTests.ArraysUsingList1(java.lang.String,int,java.lang.String)[pri:4, instance:testClasses.ArrayTests@4ddbbdf8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:32:13 EDT" name="startTest" finished-at="2025-05-19T14:32:18 EDT" duration-ms="5423" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.ArrayTests.BasicOperationsinLists(java.lang.String,int,java.lang.String) throws java.io.IOException,org.apache.poi.openxml4j.exceptions.OpenXML4JException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:32:18 EDT" name="setUpOnce" finished-at="2025-05-19T14:32:22 EDT" duration-ms="3826" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="BasicOperationsinLists(java.lang.String,int,java.lang.String)[pri:5, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:32:22 EDT" name="BasicOperationsinLists" data-provider="ValidPythonCode" finished-at="2025-05-19T14:32:29 EDT" duration-ms="7090" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BasicOperationsinLists -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:32:29 EDT" name="tearDown" finished-at="2025-05-19T14:32:29 EDT" duration-ms="533" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:32:29 EDT" name="screenShot" finished-at="2025-05-19T14:32:29 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=BasicOperationsinLists status=SUCCESS method=ArrayTests.BasicOperationsinLists(java.lang.String,int,java.lang.String)[pri:5, instance:testClasses.ArrayTests@4ddbbdf8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:32:29 EDT" name="startTest" finished-at="2025-05-19T14:32:35 EDT" duration-ms="5610" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.ArrayTests.BasicOperationsinLists1(java.lang.String,int,java.lang.String) throws java.io.IOException,org.apache.poi.openxml4j.exceptions.OpenXML4JException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:32:35 EDT" name="setUpOnce" finished-at="2025-05-19T14:32:39 EDT" duration-ms="3988" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="BasicOperationsinLists1(java.lang.String,int,java.lang.String)[pri:6, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:32:39 EDT" name="BasicOperationsinLists1" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:32:47 EDT" duration-ms="8213" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BasicOperationsinLists1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:32:47 EDT" name="tearDown" finished-at="2025-05-19T14:32:47 EDT" duration-ms="177" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:32:47 EDT" name="screenShot" finished-at="2025-05-19T14:32:47 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=BasicOperationsinLists1 status=SUCCESS method=ArrayTests.BasicOperationsinLists1(java.lang.String,int,java.lang.String)[pri:6, instance:testClasses.ArrayTests@4ddbbdf8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:32:47 EDT" name="startTest" finished-at="2025-05-19T14:32:52 EDT" duration-ms="4957" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.ArrayTests.ApplicationsofArray(java.lang.String,int,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:32:52 EDT" name="setUpOnce" finished-at="2025-05-19T14:32:55 EDT" duration-ms="2696" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="ApplicationsofArray(java.lang.String,int,java.lang.String)[pri:7, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:32:55 EDT" name="ApplicationsofArray" data-provider="ValidPythonCode" finished-at="2025-05-19T14:33:03 EDT" duration-ms="7630" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ApplicationsofArray -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:03 EDT" name="tearDown" finished-at="2025-05-19T14:33:03 EDT" duration-ms="325" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:03 EDT" name="screenShot" finished-at="2025-05-19T14:33:03 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ApplicationsofArray status=SUCCESS method=ArrayTests.ApplicationsofArray(java.lang.String,int,java.lang.String)[pri:7, instance:testClasses.ArrayTests@4ddbbdf8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:03 EDT" name="startTest" finished-at="2025-05-19T14:33:06 EDT" duration-ms="3379" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.ArrayTests.ApplicationsofArray1(java.lang.String,int,java.lang.String) throws java.io.IOException,org.apache.poi.openxml4j.exceptions.OpenXML4JException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:06 EDT" name="setUpOnce" finished-at="2025-05-19T14:33:09 EDT" duration-ms="2562" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="ApplicationsofArray1(java.lang.String,int,java.lang.String)[pri:8, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:09 EDT" name="ApplicationsofArray1" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:33:16 EDT" duration-ms="7375" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ApplicationsofArray1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:16 EDT" name="tearDown" finished-at="2025-05-19T14:33:17 EDT" duration-ms="228" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:17 EDT" name="screenShot" finished-at="2025-05-19T14:33:17 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ApplicationsofArray1 status=SUCCESS method=ArrayTests.ApplicationsofArray1(java.lang.String,int,java.lang.String)[pri:8, instance:testClasses.ArrayTests@4ddbbdf8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:17 EDT" name="startTest" finished-at="2025-05-19T14:33:20 EDT" duration-ms="3321" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.ArrayTests.SearchTheArray(java.lang.String,int,java.lang.String) throws java.io.IOException,org.apache.poi.openxml4j.exceptions.OpenXML4JException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:20 EDT" name="setUpOnce" finished-at="2025-05-19T14:33:26 EDT" duration-ms="5816" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="SearchTheArray(java.lang.String,int,java.lang.String)[pri:9, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:26 EDT" name="SearchTheArray" data-provider="Pythoncode1" finished-at="2025-05-19T14:33:34 EDT" duration-ms="8036" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ArrayPracticeQnsQ1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Element Found]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SearchTheArray -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:34 EDT" name="tearDown" finished-at="2025-05-19T14:33:34 EDT" duration-ms="379" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:34 EDT" name="screenShot" finished-at="2025-05-19T14:33:34 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SearchTheArray status=SUCCESS method=ArrayTests.SearchTheArray(java.lang.String,int,java.lang.String)[pri:9, instance:testClasses.ArrayTests@4ddbbdf8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:34 EDT" name="startTest" finished-at="2025-05-19T14:33:37 EDT" duration-ms="3035" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.ArrayTests.SearchTheArray1(java.lang.String,int,java.lang.String) throws java.io.IOException,org.apache.poi.openxml4j.exceptions.OpenXML4JException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:37 EDT" name="setUpOnce" finished-at="2025-05-19T14:33:42 EDT" duration-ms="4587" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="SearchTheArray1(java.lang.String,int,java.lang.String)[pri:10, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:42 EDT" name="SearchTheArray1" data-provider="Pythoncode2" finished-at="2025-05-19T14:33:50 EDT" duration-ms="7937" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[ArrayPracticeQnsQ1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.UnhandledAlertException">
            <message>
              <![CDATA[unexpected alert open: {Alert text : SyntaxError: bad input on line 2}
  (Session info: chrome=136.0.7103.114): SyntaxError: bad input on line 2
Build info: version: '4.20.0', revision: '866c76ca80'
System info: os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '15.1.1', java.version: '23.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [43d1b00e9b393a2570940b8fff77ce49, findElement {using=xpath, value=//button[text()='Run']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.114, chrome: {chromedriverVersion: 136.0.7103.94 (fa0be0b33deb..., userDataDir: /var/folders/49/t7zfzxpj60s...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:63443}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: mac, proxy: Proxy(), se:cdp: ws://localhost:63443/devtoo..., se:cdpVersion: 136.0.7103.114, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 43d1b00e9b393a2570940b8fff77ce49]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.UnhandledAlertException: unexpected alert open: {Alert text : SyntaxError: bad input on line 2}
  (Session info: chrome=136.0.7103.114): SyntaxError: bad input on line 2
Build info: version: '4.20.0', revision: '866c76ca80'
System info: os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '15.1.1', java.version: '23.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [43d1b00e9b393a2570940b8fff77ce49, findElement {using=xpath, value=//button[text()='Run']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.114, chrome: {chromedriverVersion: 136.0.7103.94 (fa0be0b33deb..., userDataDir: /var/folders/49/t7zfzxpj60s...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:63443}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: mac, proxy: Proxy(), se:cdp: ws://localhost:63443/devtoo..., se:cdpVersion: 136.0.7103.114, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 43d1b00e9b393a2570940b8fff77ce49
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:136)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy17.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.ExpectedConditions$23.apply(ExpectedConditions.java:656)
at org.openqa.selenium.support.ui.ExpectedConditions$23.apply(ExpectedConditions.java:652)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
at dsAlgoPageObjects.TryEditorPage.clickRunButton(TryEditorPage.java:52)
at testClasses.ArrayTests.SearchTheArray1(ArrayTests.java:233)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at org.testng.internal.thread.graph.TestNGFutureTask.run(TestNGFutureTask.java:22)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1575)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.UnhandledAlertException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SearchTheArray1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:50 EDT" name="tearDown" finished-at="2025-05-19T14:33:50 EDT" duration-ms="192" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:50 EDT" name="screenShot" finished-at="2025-05-19T14:33:50 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SearchTheArray1 status=FAILURE method=ArrayTests.SearchTheArray1(java.lang.String,int,java.lang.String)[pri:10, instance:testClasses.ArrayTests@4ddbbdf8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method signature="MaxConsecutiveOnes(java.lang.String,int,java.lang.String)[pri:11, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:50 EDT" name="MaxConsecutiveOnes" finished-at="2025-05-19T14:33:50 EDT" duration-ms="0" status="FAIL">
          <exception class="org.testng.TestNGException">
            <message>
              <![CDATA[
Found two providers called 'MaxConsecutiveOnesData' on class testClasses.ArrayTests]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestNGException: 
Found two providers called 'MaxConsecutiveOnesData' on class testClasses.ArrayTests
at org.testng.internal.Parameters.findDataProvider(Parameters.java:647)
at org.testng.internal.Parameters.findDataProvider(Parameters.java:516)
at org.testng.internal.Parameters.handleParameters(Parameters.java:769)
at org.testng.internal.Parameters.handleParameters(Parameters.java:734)
at org.testng.internal.invokers.ParameterHandler.handleParameters(ParameterHandler.java:72)
at org.testng.internal.invokers.ParameterHandler.createParameters(ParameterHandler.java:51)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:949)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at org.testng.internal.thread.graph.TestNGFutureTask.run(TestNGFutureTask.java:22)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1575)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.TestNGException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MaxConsecutiveOnes -->
        <test-method signature="MaxConsecutiveOnes1(java.lang.String,int,java.lang.String)[pri:12, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:50 EDT" name="MaxConsecutiveOnes1" finished-at="2025-05-19T14:33:50 EDT" duration-ms="0" status="FAIL">
          <exception class="org.testng.TestNGException">
            <message>
              <![CDATA[
Found two providers called 'MaxConsecutiveOnesData' on class testClasses.ArrayTests]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestNGException: 
Found two providers called 'MaxConsecutiveOnesData' on class testClasses.ArrayTests
at org.testng.internal.Parameters.findDataProvider(Parameters.java:647)
at org.testng.internal.Parameters.findDataProvider(Parameters.java:516)
at org.testng.internal.Parameters.handleParameters(Parameters.java:769)
at org.testng.internal.Parameters.handleParameters(Parameters.java:734)
at org.testng.internal.invokers.ParameterHandler.handleParameters(ParameterHandler.java:72)
at org.testng.internal.invokers.ParameterHandler.createParameters(ParameterHandler.java:51)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:949)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at org.testng.internal.thread.graph.TestNGFutureTask.run(TestNGFutureTask.java:22)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1575)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.TestNGException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MaxConsecutiveOnes1 -->
        <test-method signature="EvenNumberOfDigits(java.lang.String,int,java.lang.String)[pri:13, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:50 EDT" name="EvenNumberOfDigits" finished-at="2025-05-19T14:33:50 EDT" duration-ms="0" status="FAIL">
          <exception class="org.testng.TestNGException">
            <message>
              <![CDATA[
Found two providers called 'EvenDigitsData' on class testClasses.ArrayTests]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestNGException: 
Found two providers called 'EvenDigitsData' on class testClasses.ArrayTests
at org.testng.internal.Parameters.findDataProvider(Parameters.java:647)
at org.testng.internal.Parameters.findDataProvider(Parameters.java:516)
at org.testng.internal.Parameters.handleParameters(Parameters.java:769)
at org.testng.internal.Parameters.handleParameters(Parameters.java:734)
at org.testng.internal.invokers.ParameterHandler.handleParameters(ParameterHandler.java:72)
at org.testng.internal.invokers.ParameterHandler.createParameters(ParameterHandler.java:51)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:949)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at org.testng.internal.thread.graph.TestNGFutureTask.run(TestNGFutureTask.java:22)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1575)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.TestNGException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EvenNumberOfDigits -->
        <test-method signature="EvenNumberOfDigits1(java.lang.String,int,java.lang.String)[pri:14, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:50 EDT" name="EvenNumberOfDigits1" finished-at="2025-05-19T14:33:50 EDT" duration-ms="0" status="FAIL">
          <exception class="org.testng.TestNGException">
            <message>
              <![CDATA[
Found two providers called 'EvenDigitsData' on class testClasses.ArrayTests]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestNGException: 
Found two providers called 'EvenDigitsData' on class testClasses.ArrayTests
at org.testng.internal.Parameters.findDataProvider(Parameters.java:647)
at org.testng.internal.Parameters.findDataProvider(Parameters.java:516)
at org.testng.internal.Parameters.handleParameters(Parameters.java:769)
at org.testng.internal.Parameters.handleParameters(Parameters.java:734)
at org.testng.internal.invokers.ParameterHandler.handleParameters(ParameterHandler.java:72)
at org.testng.internal.invokers.ParameterHandler.createParameters(ParameterHandler.java:51)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:949)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at org.testng.internal.thread.graph.TestNGFutureTask.run(TestNGFutureTask.java:22)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1575)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.TestNGException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EvenNumberOfDigits1 -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:50 EDT" name="startTest" finished-at="2025-05-19T14:33:53 EDT" duration-ms="3373" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testClasses.ArrayTests.SquaresofaSorted(java.lang.String,int,java.lang.String) throws java.io.IOException,org.apache.poi.openxml4j.exceptions.OpenXML4JException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUpOnce()[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:53 EDT" name="setUpOnce" finished-at="2025-05-19T14:33:58 EDT" duration-ms="4487" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOnce -->
        <test-method signature="SquaresofaSorted(java.lang.String,int,java.lang.String)[pri:15, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:33:58 EDT" name="SquaresofaSorted" data-provider="ValidPythonCode" finished-at="2025-05-19T14:34:07 EDT" duration-ms="8699" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SquaresofaSorted -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:34:07 EDT" name="tearDown" finished-at="2025-05-19T14:34:07 EDT" duration-ms="312" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="screenShot(org.testng.ITestResult)[pri:0, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:34:07 EDT" name="screenShot" finished-at="2025-05-19T14:34:07 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SquaresofaSorted status=SUCCESS method=ArrayTests.SquaresofaSorted(java.lang.String,int,java.lang.String)[pri:15, instance:testClasses.ArrayTests@4ddbbdf8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- screenShot -->
        <test-method signature="SquaresofaSorted1(java.lang.String,int,java.lang.String)[pri:16, instance:testClasses.ArrayTests@4ddbbdf8]" started-at="2025-05-19T14:34:07 EDT" name="SquaresofaSorted1" finished-at="2025-05-19T14:34:07 EDT" duration-ms="0" status="FAIL">
          <exception class="org.testng.TestNGException">
            <message>
              <![CDATA[
Method public void testClasses.ArrayTests.SquaresofaSorted1(java.lang.String,int,java.lang.String) throws java.io.IOException,org.apache.poi.openxml4j.exceptions.OpenXML4JException requires a @DataProvider named : InValidPythonCode in class utils.DataProviders]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestNGException: 
Method public void testClasses.ArrayTests.SquaresofaSorted1(java.lang.String,int,java.lang.String) throws java.io.IOException,org.apache.poi.openxml4j.exceptions.OpenXML4JException requires a @DataProvider named : InValidPythonCode in class utils.DataProviders
at org.testng.internal.Parameters.findDataProvider(Parameters.java:532)
at org.testng.internal.Parameters.handleParameters(Parameters.java:769)
at org.testng.internal.Parameters.handleParameters(Parameters.java:734)
at org.testng.internal.invokers.ParameterHandler.handleParameters(ParameterHandler.java:72)
at org.testng.internal.invokers.ParameterHandler.createParameters(ParameterHandler.java:51)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:949)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at org.testng.internal.thread.graph.TestNGFutureTask.run(TestNGFutureTask.java:22)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1575)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.TestNGException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SquaresofaSorted1 -->
      </class> <!-- testClasses.ArrayTests -->
      <class name="baseClass.BaseClass">
        <test-method is-config="true" signature="setUpSuite()[pri:0, instance:baseClass.BaseClass@258d79be]" started-at="2025-05-19T14:30:20 EDT" name="setUpSuite" finished-at="2025-05-19T14:30:23 EDT" duration-ms="3246" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpSuite -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:baseClass.BaseClass@258d79be]" started-at="2025-05-19T14:39:17 EDT" name="tearDown" finished-at="2025-05-19T14:39:18 EDT" duration-ms="539" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- baseClass.BaseClass -->
      <class name="testClasses.HomeTests">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:31:09 EDT" name="setUp" finished-at="2025-05-19T14:31:19 EDT" duration-ms="10617" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="DSDropdown()[pri:1, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:31:19 EDT" name="DSDropdown" finished-at="2025-05-19T14:31:25 EDT" duration-ms="5248" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DSDropdown -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:31:25 EDT" name="tearDown" finished-at="2025-05-19T14:31:25 EDT" duration-ms="137" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:31:25 EDT" name="setUp" finished-at="2025-05-19T14:31:33 EDT" duration-ms="8163" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="DataStructureIntroductionGetstarted()[pri:1, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:31:33 EDT" name="DataStructureIntroductionGetstarted" finished-at="2025-05-19T14:31:38 EDT" duration-ms="5472" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DataStructureIntroductionGetstarted -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:31:38 EDT" name="tearDown" finished-at="2025-05-19T14:31:39 EDT" duration-ms="212" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:31:39 EDT" name="setUp" finished-at="2025-05-19T14:31:46 EDT" duration-ms="6815" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="ArrayGetStarted()[pri:2, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:31:46 EDT" name="ArrayGetStarted" finished-at="2025-05-19T14:31:46 EDT" duration-ms="465" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ArrayGetStarted -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:31:46 EDT" name="tearDown" finished-at="2025-05-19T14:31:46 EDT" duration-ms="163" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:31:46 EDT" name="setUp" finished-at="2025-05-19T14:31:55 EDT" duration-ms="8648" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="LinkedListGetStarted()[pri:3, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:31:55 EDT" name="LinkedListGetStarted" finished-at="2025-05-19T14:31:55 EDT" duration-ms="402" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LinkedListGetStarted -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:31:55 EDT" name="tearDown" finished-at="2025-05-19T14:31:55 EDT" duration-ms="125" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:31:55 EDT" name="setUp" finished-at="2025-05-19T14:32:02 EDT" duration-ms="7101" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="StackGetStarted()[pri:4, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:32:02 EDT" name="StackGetStarted" finished-at="2025-05-19T14:32:03 EDT" duration-ms="456" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- StackGetStarted -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:32:03 EDT" name="tearDown" finished-at="2025-05-19T14:32:03 EDT" duration-ms="295" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:32:03 EDT" name="setUp" finished-at="2025-05-19T14:32:15 EDT" duration-ms="11685" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="QueueGetStarted()[pri:5, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:32:15 EDT" name="QueueGetStarted" finished-at="2025-05-19T14:32:15 EDT" duration-ms="572" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QueueGetStarted -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:32:15 EDT" name="tearDown" finished-at="2025-05-19T14:32:16 EDT" duration-ms="309" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:32:16 EDT" name="setUp" finished-at="2025-05-19T14:32:26 EDT" duration-ms="10424" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="TreeGetStarted()[pri:6, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:32:26 EDT" name="TreeGetStarted" finished-at="2025-05-19T14:32:27 EDT" duration-ms="395" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TreeGetStarted -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:32:27 EDT" name="tearDown" finished-at="2025-05-19T14:32:27 EDT" duration-ms="138" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:32:27 EDT" name="setUp" finished-at="2025-05-19T14:32:35 EDT" duration-ms="7970" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="GraphGetStarted()[pri:7, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:32:35 EDT" name="GraphGetStarted" finished-at="2025-05-19T14:32:40 EDT" duration-ms="5291" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GraphGetStarted -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.HomeTests@455b6df1]" started-at="2025-05-19T14:32:40 EDT" name="tearDown" finished-at="2025-05-19T14:32:40 EDT" duration-ms="206" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- testClasses.HomeTests -->
      <class name="testClasses.LinkListTests">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:30:23 EDT" name="setUp" finished-at="2025-05-19T14:30:43 EDT" duration-ms="19483" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testUserSignIn()[pri:1, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:30:43 EDT" name="testUserSignIn" finished-at="2025-05-19T14:31:08 EDT" duration-ms="25722" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for element to be clickable: Proxy element for: DefaultElementLocator 'By.xpath: //div[@class='navbar-nav']//a[@href='/login']' (tried for 10 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for element to be clickable: Proxy element for: DefaultElementLocator 'By.xpath: //div[@class='navbar-nav']//a[@href='/login']' (tried for 10 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at dsAlgoPageObjects.HomePageObj.clickSignInLink(HomePageObj.java:186)
at testClasses.LinkListTests.testUserSignIn(LinkListTests.java:67)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at org.testng.internal.thread.graph.TestNGFutureTask.run(TestNGFutureTask.java:22)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//div[@class='navbar-nav']//a[@href='/login']"}
  (Session info: chrome=136.0.7103.114)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.20.0', revision: '866c76ca80'
System info: os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '15.1.1', java.version: '23.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [dc3d3676a27e2d7304a02d80b38f81f5, findElement {using=xpath, value=//div[@class='navbar-nav']//a[@href='/login']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.114, chrome: {chromedriverVersion: 136.0.7103.94 (fa0be0b33deb..., userDataDir: /var/folders/49/t7zfzxpj60s...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:60937}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: mac, proxy: Proxy(), se:cdp: ws://localhost:60937/devtoo..., se:cdpVersion: 136.0.7103.114, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: dc3d3676a27e2d7304a02d80b38f81f5
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:501)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:485)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy17.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.ExpectedConditions$23.apply(ExpectedConditions.java:656)
at org.openqa.selenium.support.ui.ExpectedConditions$23.apply(ExpectedConditions.java:652)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 18 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserSignIn -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:31:08 EDT" name="tearDown" finished-at="2025-05-19T14:31:09 EDT" duration-ms="453" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:31:09 EDT" name="setUp" finished-at="2025-05-19T14:31:20 EDT" duration-ms="11105" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNavigateToIntroductionPage()[pri:2, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:31:20 EDT" name="testNavigateToIntroductionPage" finished-at="2025-05-19T14:31:26 EDT" duration-ms="5917" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavigateToIntroductionPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:31:26 EDT" name="tearDown" finished-at="2025-05-19T14:31:26 EDT" duration-ms="239" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:31:26 EDT" name="setUp" finished-at="2025-05-19T14:31:35 EDT" duration-ms="8566" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLLIntroductionPageNavigation()[pri:3, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:31:35 EDT" name="testLLIntroductionPageNavigation" finished-at="2025-05-19T14:31:41 EDT" duration-ms="6269" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLLIntroductionPageNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:31:41 EDT" name="tearDown" finished-at="2025-05-19T14:31:41 EDT" duration-ms="444" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:31:41 EDT" name="setUp" finished-at="2025-05-19T14:31:50 EDT" duration-ms="8125" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testTryHereButtonIntroduction()[pri:4, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:31:50 EDT" name="testTryHereButtonIntroduction" finished-at="2025-05-19T14:31:57 EDT" duration-ms="7040" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTryHereButtonIntroduction -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:31:57 EDT" name="tearDown" finished-at="2025-05-19T14:31:57 EDT" duration-ms="234" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:31:57 EDT" name="setUp" finished-at="2025-05-19T14:32:04 EDT" duration-ms="7606" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidCodeRunIntroductionPage(java.lang.String,int,java.lang.String)[pri:5, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:32:04 EDT" name="testInvalidCodeRunIntroductionPage" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:32:12 EDT" duration-ms="7176" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidCodeRunIntroductionPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:32:12 EDT" name="tearDown" finished-at="2025-05-19T14:32:12 EDT" duration-ms="226" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:32:12 EDT" name="setUp" finished-at="2025-05-19T14:32:19 EDT" duration-ms="7568" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testValidCodeRunIntroductionPage(java.lang.String,int,java.lang.String)[pri:6, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:32:19 EDT" name="testValidCodeRunIntroductionPage" data-provider="ValidPythonCode" finished-at="2025-05-19T14:32:26 EDT" duration-ms="7019" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidCodeRunIntroductionPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:32:26 EDT" name="tearDown" finished-at="2025-05-19T14:32:27 EDT" duration-ms="221" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:32:27 EDT" name="setUp" finished-at="2025-05-19T14:32:35 EDT" duration-ms="7957" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPracticeQuestionsLinkIntroductionPage()[pri:7, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:32:35 EDT" name="testPracticeQuestionsLinkIntroductionPage" finished-at="2025-05-19T14:32:41 EDT" duration-ms="6206" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPracticeQuestionsLinkIntroductionPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:32:41 EDT" name="tearDown" finished-at="2025-05-19T14:32:41 EDT" duration-ms="238" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:32:41 EDT" name="setUp" finished-at="2025-05-19T14:32:48 EDT" duration-ms="7365" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testCreatingLLPage()[pri:8, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:32:48 EDT" name="testCreatingLLPage" finished-at="2025-05-19T14:32:49 EDT" duration-ms="502" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreatingLLPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:32:49 EDT" name="tearDown" finished-at="2025-05-19T14:32:49 EDT" duration-ms="226" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:32:49 EDT" name="setUp" finished-at="2025-05-19T14:32:56 EDT" duration-ms="6855" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testCreatingLLPageNavigation()[pri:9, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:32:56 EDT" name="testCreatingLLPageNavigation" finished-at="2025-05-19T14:32:57 EDT" duration-ms="749" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreatingLLPageNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:32:57 EDT" name="tearDown" finished-at="2025-05-19T14:32:57 EDT" duration-ms="202" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:32:57 EDT" name="setUp" finished-at="2025-05-19T14:33:03 EDT" duration-ms="6150" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testTryHereButtonCreatingLL()[pri:10, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:33:03 EDT" name="testTryHereButtonCreatingLL" finished-at="2025-05-19T14:33:05 EDT" duration-ms="1667" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTryHereButtonCreatingLL -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:33:05 EDT" name="tearDown" finished-at="2025-05-19T14:33:05 EDT" duration-ms="242" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:33:05 EDT" name="setUp" finished-at="2025-05-19T14:33:11 EDT" duration-ms="6278" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidCodeCreatingLL(java.lang.String,int,java.lang.String)[pri:11, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:33:11 EDT" name="testInvalidCodeCreatingLL" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:33:13 EDT" duration-ms="2005" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidCodeCreatingLL -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:33:13 EDT" name="tearDown" finished-at="2025-05-19T14:33:14 EDT" duration-ms="181" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:33:14 EDT" name="setUp" finished-at="2025-05-19T14:33:22 EDT" duration-ms="8640" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testValidCodeCreatingLL(java.lang.String,int,java.lang.String)[pri:12, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:33:22 EDT" name="testValidCodeCreatingLL" data-provider="ValidPythonCode" finished-at="2025-05-19T14:33:29 EDT" duration-ms="6707" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidCodeCreatingLL -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:33:29 EDT" name="tearDown" finished-at="2025-05-19T14:33:29 EDT" duration-ms="216" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:33:29 EDT" name="setUp" finished-at="2025-05-19T14:33:35 EDT" duration-ms="6076" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPracticeQuestionsLinkcreatingLL()[pri:13, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:33:35 EDT" name="testPracticeQuestionsLinkcreatingLL" finished-at="2025-05-19T14:33:36 EDT" duration-ms="1219" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPracticeQuestionsLinkcreatingLL -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:33:36 EDT" name="tearDown" finished-at="2025-05-19T14:33:37 EDT" duration-ms="161" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:33:37 EDT" name="setUp" finished-at="2025-05-19T14:33:43 EDT" duration-ms="6323" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testTypesofLLPage()[pri:14, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:33:43 EDT" name="testTypesofLLPage" finished-at="2025-05-19T14:33:48 EDT" duration-ms="5462" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesofLLPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:33:48 EDT" name="tearDown" finished-at="2025-05-19T14:33:49 EDT" duration-ms="209" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:33:49 EDT" name="setUp" finished-at="2025-05-19T14:33:57 EDT" duration-ms="8016" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testTypesofLLPageNavigation()[pri:15, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:33:57 EDT" name="testTypesofLLPageNavigation" finished-at="2025-05-19T14:34:03 EDT" duration-ms="6349" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesofLLPageNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:34:03 EDT" name="tearDown" finished-at="2025-05-19T14:34:03 EDT" duration-ms="312" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:34:03 EDT" name="setUp" finished-at="2025-05-19T14:34:12 EDT" duration-ms="8698" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testTryHereButtonTypesofLL()[pri:16, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:34:12 EDT" name="testTryHereButtonTypesofLL" finished-at="2025-05-19T14:34:19 EDT" duration-ms="7347" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTryHereButtonTypesofLL -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:34:19 EDT" name="tearDown" finished-at="2025-05-19T14:34:20 EDT" duration-ms="246" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:34:20 EDT" name="setUp" finished-at="2025-05-19T14:34:26 EDT" duration-ms="6438" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidCodeTypesofLL(java.lang.String,int,java.lang.String)[pri:17, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:34:26 EDT" name="testInvalidCodeTypesofLL" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:34:33 EDT" duration-ms="7287" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidCodeTypesofLL -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:34:33 EDT" name="tearDown" finished-at="2025-05-19T14:34:34 EDT" duration-ms="225" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:34:34 EDT" name="setUp" finished-at="2025-05-19T14:34:39 EDT" duration-ms="5718" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testValidCodeTypesofLL(java.lang.String,int,java.lang.String)[pri:18, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:34:39 EDT" name="testValidCodeTypesofLL" data-provider="ValidPythonCode" finished-at="2025-05-19T14:34:41 EDT" duration-ms="1785" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidCodeTypesofLL -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:34:41 EDT" name="tearDown" finished-at="2025-05-19T14:34:41 EDT" duration-ms="121" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:34:41 EDT" name="setUp" finished-at="2025-05-19T14:34:47 EDT" duration-ms="5461" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPracticeQuestionsLinkTypesofLL()[pri:19, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:34:47 EDT" name="testPracticeQuestionsLinkTypesofLL" finished-at="2025-05-19T14:34:53 EDT" duration-ms="6177" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPracticeQuestionsLinkTypesofLL -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:34:53 EDT" name="tearDown" finished-at="2025-05-19T14:34:53 EDT" duration-ms="146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:34:53 EDT" name="setUp" finished-at="2025-05-19T14:35:11 EDT" duration-ms="17678" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="implementLLPage()[pri:20, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:35:11 EDT" name="implementLLPage" finished-at="2025-05-19T14:35:16 EDT" duration-ms="5437" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- implementLLPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:35:16 EDT" name="tearDown" finished-at="2025-05-19T14:35:16 EDT" duration-ms="139" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:35:16 EDT" name="setUp" finished-at="2025-05-19T14:35:31 EDT" duration-ms="14857" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testImplementLLPageNavigation()[pri:21, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:35:31 EDT" name="testImplementLLPageNavigation" finished-at="2025-05-19T14:35:37 EDT" duration-ms="5932" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImplementLLPageNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:35:37 EDT" name="tearDown" finished-at="2025-05-19T14:35:37 EDT" duration-ms="129" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:35:37 EDT" name="setUp" finished-at="2025-05-19T14:35:45 EDT" duration-ms="7550" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testTryHereButtonImplementLL()[pri:22, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:35:45 EDT" name="testTryHereButtonImplementLL" finished-at="2025-05-19T14:35:51 EDT" duration-ms="6374" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTryHereButtonImplementLL -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:35:51 EDT" name="tearDown" finished-at="2025-05-19T14:35:51 EDT" duration-ms="167" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:35:51 EDT" name="setUp" finished-at="2025-05-19T14:35:58 EDT" duration-ms="7100" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidCodeImplementLL(java.lang.String,int,java.lang.String)[pri:23, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:35:58 EDT" name="testInvalidCodeImplementLL" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:36:06 EDT" duration-ms="7828" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidCodeImplementLL -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:36:06 EDT" name="tearDown" finished-at="2025-05-19T14:36:06 EDT" duration-ms="148" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:36:06 EDT" name="setUp" finished-at="2025-05-19T14:36:11 EDT" duration-ms="4300" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testValidCodeImplementLL(java.lang.String,int,java.lang.String)[pri:24, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:36:11 EDT" name="testValidCodeImplementLL" data-provider="ValidPythonCode" finished-at="2025-05-19T14:36:17 EDT" duration-ms="6384" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidCodeImplementLL -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:36:17 EDT" name="tearDown" finished-at="2025-05-19T14:36:17 EDT" duration-ms="192" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:36:17 EDT" name="setUp" finished-at="2025-05-19T14:36:21 EDT" duration-ms="4310" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPracticeQuestionsLinkImplementLL()[pri:25, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:36:21 EDT" name="testPracticeQuestionsLinkImplementLL" finished-at="2025-05-19T14:36:27 EDT" duration-ms="5879" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPracticeQuestionsLinkImplementLL -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:36:27 EDT" name="tearDown" finished-at="2025-05-19T14:36:28 EDT" duration-ms="170" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:36:28 EDT" name="setUp" finished-at="2025-05-19T14:36:34 EDT" duration-ms="6396" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="traversalPage()[pri:26, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:36:34 EDT" name="traversalPage" finished-at="2025-05-19T14:36:39 EDT" duration-ms="5509" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- traversalPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:36:39 EDT" name="tearDown" finished-at="2025-05-19T14:36:40 EDT" duration-ms="143" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:36:40 EDT" name="setUp" finished-at="2025-05-19T14:36:44 EDT" duration-ms="4196" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testTraversalPageNavigation()[pri:27, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:36:44 EDT" name="testTraversalPageNavigation" finished-at="2025-05-19T14:36:44 EDT" duration-ms="550" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTraversalPageNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:36:44 EDT" name="tearDown" finished-at="2025-05-19T14:36:44 EDT" duration-ms="130" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:36:44 EDT" name="setUp" finished-at="2025-05-19T14:36:48 EDT" duration-ms="3977" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testTryHereButtonTraversal()[pri:28, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:36:48 EDT" name="testTryHereButtonTraversal" finished-at="2025-05-19T14:36:55 EDT" duration-ms="6430" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTryHereButtonTraversal -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:36:55 EDT" name="tearDown" finished-at="2025-05-19T14:36:55 EDT" duration-ms="183" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:36:55 EDT" name="setUp" finished-at="2025-05-19T14:37:00 EDT" duration-ms="5136" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidCodeTraversal(java.lang.String,int,java.lang.String)[pri:29, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:37:00 EDT" name="testInvalidCodeTraversal" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:37:07 EDT" duration-ms="6553" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidCodeTraversal -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:37:07 EDT" name="tearDown" finished-at="2025-05-19T14:37:07 EDT" duration-ms="196" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:37:07 EDT" name="setUp" finished-at="2025-05-19T14:37:12 EDT" duration-ms="4721" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testValidCodeTraversal(java.lang.String,int,java.lang.String)[pri:30, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:37:12 EDT" name="testValidCodeTraversal" data-provider="ValidPythonCode" finished-at="2025-05-19T14:37:18 EDT" duration-ms="6482" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidCodeTraversal -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:37:18 EDT" name="tearDown" finished-at="2025-05-19T14:37:18 EDT" duration-ms="126" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:37:18 EDT" name="setUp" finished-at="2025-05-19T14:37:23 EDT" duration-ms="4444" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPracticeQuestionsLinkTraversal()[pri:31, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:37:23 EDT" name="testPracticeQuestionsLinkTraversal" finished-at="2025-05-19T14:37:24 EDT" duration-ms="877" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPracticeQuestionsLinkTraversal -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:37:24 EDT" name="tearDown" finished-at="2025-05-19T14:37:24 EDT" duration-ms="135" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:37:24 EDT" name="setUp" finished-at="2025-05-19T14:37:28 EDT" duration-ms="4093" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="insertionPage()[pri:32, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:37:28 EDT" name="insertionPage" finished-at="2025-05-19T14:37:33 EDT" duration-ms="5306" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertionPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:37:33 EDT" name="tearDown" finished-at="2025-05-19T14:37:33 EDT" duration-ms="142" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:37:33 EDT" name="setUp" finished-at="2025-05-19T14:37:37 EDT" duration-ms="3951" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInsertionPageNavigation()[pri:33, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:37:37 EDT" name="testInsertionPageNavigation" finished-at="2025-05-19T14:37:38 EDT" duration-ms="636" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInsertionPageNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:37:38 EDT" name="tearDown" finished-at="2025-05-19T14:37:38 EDT" duration-ms="127" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:37:38 EDT" name="setUp" finished-at="2025-05-19T14:37:42 EDT" duration-ms="3963" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testTryHereButtonInsertion()[pri:34, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:37:42 EDT" name="testTryHereButtonInsertion" finished-at="2025-05-19T14:37:49 EDT" duration-ms="6704" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTryHereButtonInsertion -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:37:49 EDT" name="tearDown" finished-at="2025-05-19T14:37:49 EDT" duration-ms="140" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:37:49 EDT" name="setUp" finished-at="2025-05-19T14:37:53 EDT" duration-ms="4433" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidCodeInsertion(java.lang.String,int,java.lang.String)[pri:35, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:37:53 EDT" name="testInvalidCodeInsertion" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:38:00 EDT" duration-ms="6375" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidCodeInsertion -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:38:00 EDT" name="tearDown" finished-at="2025-05-19T14:38:00 EDT" duration-ms="151" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:38:00 EDT" name="setUp" finished-at="2025-05-19T14:38:05 EDT" duration-ms="5271" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testValidCodeInsertion(java.lang.String,int,java.lang.String)[pri:36, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:38:05 EDT" name="testValidCodeInsertion" data-provider="ValidPythonCode" finished-at="2025-05-19T14:38:12 EDT" duration-ms="6540" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidCodeInsertion -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:38:12 EDT" name="tearDown" finished-at="2025-05-19T14:38:12 EDT" duration-ms="136" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:38:12 EDT" name="setUp" finished-at="2025-05-19T14:38:16 EDT" duration-ms="3949" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPracticeQuestionsLinkInsertion()[pri:37, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:38:16 EDT" name="testPracticeQuestionsLinkInsertion" finished-at="2025-05-19T14:38:22 EDT" duration-ms="5883" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPracticeQuestionsLinkInsertion -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:38:22 EDT" name="tearDown" finished-at="2025-05-19T14:38:22 EDT" duration-ms="132" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:38:22 EDT" name="setUp" finished-at="2025-05-19T14:38:26 EDT" duration-ms="4018" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="deletionPage()[pri:38, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:38:26 EDT" name="deletionPage" finished-at="2025-05-19T14:38:31 EDT" duration-ms="5296" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deletionPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:38:31 EDT" name="tearDown" finished-at="2025-05-19T14:38:31 EDT" duration-ms="130" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:38:31 EDT" name="setUp" finished-at="2025-05-19T14:38:35 EDT" duration-ms="3991" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDeletionPageNavigation()[pri:39, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:38:35 EDT" name="testDeletionPageNavigation" finished-at="2025-05-19T14:38:36 EDT" duration-ms="579" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeletionPageNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:38:36 EDT" name="tearDown" finished-at="2025-05-19T14:38:36 EDT" duration-ms="135" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:38:36 EDT" name="setUp" finished-at="2025-05-19T14:38:40 EDT" duration-ms="4015" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testTryHereButtonDeletion()[pri:40, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:38:40 EDT" name="testTryHereButtonDeletion" finished-at="2025-05-19T14:38:46 EDT" duration-ms="6402" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTryHereButtonDeletion -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:38:46 EDT" name="tearDown" finished-at="2025-05-19T14:38:46 EDT" duration-ms="136" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:38:46 EDT" name="setUp" finished-at="2025-05-19T14:38:50 EDT" duration-ms="3906" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidCodeDeletion(java.lang.String,int,java.lang.String)[pri:41, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:38:50 EDT" name="testInvalidCodeDeletion" data-provider="InvalidPythonCode" finished-at="2025-05-19T14:38:57 EDT" duration-ms="6376" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[SyntaxError: bad input on line 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidCodeDeletion -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:38:57 EDT" name="tearDown" finished-at="2025-05-19T14:38:57 EDT" duration-ms="139" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:38:57 EDT" name="setUp" finished-at="2025-05-19T14:39:01 EDT" duration-ms="3923" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testValidCodeDeletion(java.lang.String,int,java.lang.String)[pri:42, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:39:01 EDT" name="testValidCodeDeletion" data-provider="ValidPythonCode" finished-at="2025-05-19T14:39:07 EDT" duration-ms="6400" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[tryEditorCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Python is fun!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidCodeDeletion -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:39:07 EDT" name="tearDown" finished-at="2025-05-19T14:39:07 EDT" duration-ms="132" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:39:07 EDT" name="setUp" finished-at="2025-05-19T14:39:11 EDT" duration-ms="3964" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPracticeQuestionsLinkDeletion()[pri:43, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:39:11 EDT" name="testPracticeQuestionsLinkDeletion" finished-at="2025-05-19T14:39:17 EDT" duration-ms="5794" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPracticeQuestionsLinkDeletion -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testClasses.LinkListTests@4196c360]" started-at="2025-05-19T14:39:17 EDT" name="tearDown" finished-at="2025-05-19T14:39:17 EDT" duration-ms="134" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- testClasses.LinkListTests -->
    </test> <!-- DSAlgo Tests -->
  </suite> <!-- DSAlgo Suite -->
</testng-results>
